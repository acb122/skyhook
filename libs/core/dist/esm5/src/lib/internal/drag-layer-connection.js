import { Subscription, BehaviorSubject } from 'rxjs';
import { areCollectsEqual } from '../utils/areCollectsEqual';
import { map, distinctUntilChanged } from 'rxjs/operators';
import { scheduleMicroTaskAfter } from './scheduleMicroTaskAfter';
var DragLayerConnectionClass = /** @class */ (function () {
    function DragLayerConnectionClass(manager, zone) {
        var _this = this;
        this.manager = manager;
        this.zone = zone;
        this.subscription = new Subscription();
        this.isTicking = false;
        this.handleStateChange = function () {
            var monitor = _this.manager.getMonitor();
            _this.collector$.next(monitor);
        };
        this.handleOffsetChange = function () {
            var monitor = _this.manager.getMonitor();
            _this.collector$.next(monitor);
        };
        var monitor = this.manager.getMonitor();
        this.collector$ = new BehaviorSubject(monitor);
        this.unsubscribeFromOffsetChange = monitor.subscribeToOffsetChange(this.handleOffsetChange);
        this.unsubscribeFromStateChange = monitor.subscribeToStateChange(this.handleStateChange);
        this.subscription.add(function () {
            _this.unsubscribeFromOffsetChange();
            _this.unsubscribeFromStateChange();
        });
        this.handleStateChange();
    }
    DragLayerConnectionClass.prototype.listen = function (mapFn) {
        return this.collector$.pipe(map(mapFn), distinctUntilChanged(areCollectsEqual), scheduleMicroTaskAfter(this.zone));
    };
    DragLayerConnectionClass.prototype.unsubscribe = function () {
        this.collector$.complete();
        this.subscription.unsubscribe();
    };
    DragLayerConnectionClass.prototype.add = function (teardown) {
        return this.subscription.add(teardown);
    };
    Object.defineProperty(DragLayerConnectionClass.prototype, "closed", {
        get: function () {
            return this.subscription.closed;
        },
        enumerable: false,
        configurable: true
    });
    return DragLayerConnectionClass;
}());
export { DragLayerConnectionClass };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1sYXllci1jb25uZWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJlZG5heC9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2xpYi9pbnRlcm5hbC9kcmFnLWxheWVyLWNvbm5lY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBYyxlQUFlLEVBQWlCLE1BQU0sTUFBTSxDQUFDO0FBSWhGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzdELE9BQU8sRUFBRSxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVsRTtJQVFFLGtDQUFvQixPQUF3QixFQUFVLElBQVU7UUFBaEUsaUJBZ0JDO1FBaEJtQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQU07UUFIeEQsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBcUIxQyxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBRVYsc0JBQWlCLEdBQUc7WUFDMUIsSUFBTSxPQUFPLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQXNCLENBQUM7WUFDOUQsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFBO1FBQ08sdUJBQWtCLEdBQUc7WUFDM0IsSUFBTSxPQUFPLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQXNCLENBQUM7WUFDOUQsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFBO1FBMUJDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBbUIsT0FBTyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLDJCQUEyQixHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FDaEUsSUFBSSxDQUFDLGtCQUFrQixDQUN4QixDQUFDO1FBQ0YsSUFBSSxDQUFDLDBCQUEwQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FDOUQsSUFBSSxDQUFDLGlCQUFpQixDQUN2QixDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUM7WUFDcEIsS0FBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7WUFDbkMsS0FBSSxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBYUQseUNBQU0sR0FBTixVQUFVLEtBQXVDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ3pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFDVixvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUN0QyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ2xDLENBQUM7SUFDSixDQUFDO0lBRUQsOENBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsc0NBQUcsR0FBSCxVQUFJLFFBQXVCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELHNCQUFJLDRDQUFNO2FBQVY7WUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ2xDLENBQUM7OztPQUFBO0lBRUgsK0JBQUM7QUFBRCxDQUFDLEFBMURELElBMERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIFRlYXJkb3duTG9naWMgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERyYWdEcm9wTWFuYWdlciwgVW5zdWJzY3JpYmUgfSBmcm9tICdkbmQtY29yZSc7XG5pbXBvcnQgeyBEcmFnTGF5ZXIgfSBmcm9tICcuLi9jb25uZWN0aW9uLXR5cGVzJztcbmltcG9ydCB7IERyYWdMYXllck1vbml0b3IgfSBmcm9tICcuLi9sYXllci1tb25pdG9yJztcbmltcG9ydCB7IGFyZUNvbGxlY3RzRXF1YWwgfSBmcm9tICcuLi91dGlscy9hcmVDb2xsZWN0c0VxdWFsJztcbmltcG9ydCB7IG1hcCwgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBzY2hlZHVsZU1pY3JvVGFza0FmdGVyIH0gZnJvbSAnLi9zY2hlZHVsZU1pY3JvVGFza0FmdGVyJztcblxuZXhwb3J0IGNsYXNzIERyYWdMYXllckNvbm5lY3Rpb25DbGFzcyBpbXBsZW1lbnRzIERyYWdMYXllciB7XG5cbiAgdW5zdWJzY3JpYmVGcm9tT2Zmc2V0Q2hhbmdlOiBVbnN1YnNjcmliZTtcbiAgdW5zdWJzY3JpYmVGcm9tU3RhdGVDaGFuZ2U6IFVuc3Vic2NyaWJlO1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbGxlY3RvciQ6IEJlaGF2aW9yU3ViamVjdDxEcmFnTGF5ZXJNb25pdG9yPjtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1hbmFnZXI6IERyYWdEcm9wTWFuYWdlciwgcHJpdmF0ZSB6b25lOiBab25lKSB7XG4gICAgY29uc3QgbW9uaXRvciA9IHRoaXMubWFuYWdlci5nZXRNb25pdG9yKCk7XG4gICAgdGhpcy5jb2xsZWN0b3IkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxEcmFnTGF5ZXJNb25pdG9yPihtb25pdG9yKTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlRnJvbU9mZnNldENoYW5nZSA9IG1vbml0b3Iuc3Vic2NyaWJlVG9PZmZzZXRDaGFuZ2UoXG4gICAgICB0aGlzLmhhbmRsZU9mZnNldENoYW5nZVxuICAgICk7XG4gICAgdGhpcy51bnN1YnNjcmliZUZyb21TdGF0ZUNoYW5nZSA9IG1vbml0b3Iuc3Vic2NyaWJlVG9TdGF0ZUNoYW5nZShcbiAgICAgIHRoaXMuaGFuZGxlU3RhdGVDaGFuZ2VcbiAgICApO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKCgpID0+IHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmVGcm9tT2Zmc2V0Q2hhbmdlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlRnJvbVN0YXRlQ2hhbmdlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmhhbmRsZVN0YXRlQ2hhbmdlKCk7XG4gIH1cblxuICBpc1RpY2tpbmcgPSBmYWxzZTtcblxuICBwcml2YXRlIGhhbmRsZVN0YXRlQ2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IG1vbml0b3IgPSB0aGlzLm1hbmFnZXIuZ2V0TW9uaXRvcigpIGFzIERyYWdMYXllck1vbml0b3I7XG4gICAgdGhpcy5jb2xsZWN0b3IkLm5leHQobW9uaXRvcik7XG4gIH1cbiAgcHJpdmF0ZSBoYW5kbGVPZmZzZXRDaGFuZ2UgPSAoKSA9PiB7XG4gICAgY29uc3QgbW9uaXRvciA9IHRoaXMubWFuYWdlci5nZXRNb25pdG9yKCkgYXMgRHJhZ0xheWVyTW9uaXRvcjtcbiAgICB0aGlzLmNvbGxlY3RvciQubmV4dChtb25pdG9yKTtcbiAgfVxuXG4gIGxpc3RlbjxQPihtYXBGbjogKG1vbml0b3I6IERyYWdMYXllck1vbml0b3IpID0+IFApOiBPYnNlcnZhYmxlPFA+IHtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0b3IkLnBpcGUoXG4gICAgICBtYXAobWFwRm4pLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoYXJlQ29sbGVjdHNFcXVhbCksXG4gICAgICBzY2hlZHVsZU1pY3JvVGFza0FmdGVyKHRoaXMuem9uZSlcbiAgICApO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUoKSB7XG4gICAgdGhpcy5jb2xsZWN0b3IkLmNvbXBsZXRlKCk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGFkZCh0ZWFyZG93bjogVGVhcmRvd25Mb2dpYyk6IFN1YnNjcmlwdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9uLmFkZCh0ZWFyZG93bik7XG4gIH1cblxuICBnZXQgY2xvc2VkKCkge1xuICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbi5jbG9zZWQ7XG4gIH1cblxufVxuXG4iXX0=