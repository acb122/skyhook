import { Reconnector } from './Reconnector';
var SourceConnector = /** @class */ (function () {
    function SourceConnector(backend) {
        var _this = this;
        this.backend = backend;
        this.dragSource = new Reconnector(function (handlerId, node, options) {
            return _this.backend.connectDragSource(handlerId, node, options);
        });
        this.dragPreview = new Reconnector(function (handlerId, node, options) {
            return _this.backend.connectDragPreview(handlerId, node, options);
        });
        this.hooks = {
            dragSource: this.dragSource.hook,
            dragPreview: this.dragPreview.hook,
        };
    }
    SourceConnector.prototype.receiveHandlerId = function (handlerId) {
        if (handlerId === this.currentHandlerId) {
            return;
        }
        this.currentHandlerId = handlerId;
        this.dragSource.reconnect(handlerId);
        this.dragPreview.reconnect(handlerId);
    };
    SourceConnector.prototype.reconnect = function () {
        this.dragSource.reconnect(this.currentHandlerId);
        this.dragPreview.reconnect(this.currentHandlerId);
    };
    return SourceConnector;
}());
export { SourceConnector };
export default function createSourceConnector(backend) {
    return new SourceConnector(backend);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlU291cmNlQ29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJlZG5heC9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2xpYi9pbnRlcm5hbC9jcmVhdGVTb3VyY2VDb25uZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVM1QztJQWNJLHlCQUFvQixPQUFnQjtRQUFwQyxpQkFBd0M7UUFBcEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQVg1QixlQUFVLEdBQUcsSUFBSSxXQUFXLENBQ2hDLFVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPO1lBQ3JCLE9BQU8sS0FBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FDSixDQUFDO1FBQ00sZ0JBQVcsR0FBRyxJQUFJLFdBQVcsQ0FDakMsVUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE9BQU87WUFDckIsT0FBTyxLQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUNKLENBQUM7UUFhSyxVQUFLLEdBQXdCO1lBQ2hDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUk7WUFDaEMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSTtTQUNyQyxDQUFDO0lBZHFDLENBQUM7SUFFakMsMENBQWdCLEdBQXZCLFVBQXdCLFNBQTRCO1FBQ2hELElBQUksU0FBUyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyQyxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFPTSxtQ0FBUyxHQUFoQjtRQUNJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUFsQ0QsSUFrQ0M7O0FBRUQsTUFBTSxDQUFDLE9BQU8sVUFBVSxxQkFBcUIsQ0FBQyxPQUFnQjtJQUMxRCxPQUFPLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYWNrZW5kLCBJZGVudGlmaWVyIH0gZnJvbSAnZG5kLWNvcmUnO1xuaW1wb3J0IHsgRHJhZ1NvdXJjZUNvbm5lY3RvciB9IGZyb20gJy4uL2Nvbm5lY3RvcnMnO1xuaW1wb3J0IHsgUmVjb25uZWN0b3IgfSBmcm9tICcuL1JlY29ubmVjdG9yJztcbmltcG9ydCB7IERyYWdQcmV2aWV3T3B0aW9ucywgRHJhZ1NvdXJjZU9wdGlvbnMgfSBmcm9tICcuLi9jb25uZWN0b3JzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbm5lY3RvcjxUQ29ubmVjdG9yPiB7XG4gICAgaG9va3M6IFRDb25uZWN0b3I7XG4gICAgcmVjZWl2ZUhhbmRsZXJJZChoYW5kbGVySWQ6IElkZW50aWZpZXIgfCBudWxsKTogdm9pZDtcbiAgICByZWNvbm5lY3QoKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFNvdXJjZUNvbm5lY3RvciBpbXBsZW1lbnRzIENvbm5lY3RvcjxEcmFnU291cmNlQ29ubmVjdG9yPiB7XG4gICAgcHJpdmF0ZSBjdXJyZW50SGFuZGxlcklkOiBhbnk7XG5cbiAgICBwcml2YXRlIGRyYWdTb3VyY2UgPSBuZXcgUmVjb25uZWN0b3I8RHJhZ1NvdXJjZU9wdGlvbnM+KFxuICAgICAgICAoaGFuZGxlcklkLCBub2RlLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYWNrZW5kLmNvbm5lY3REcmFnU291cmNlKGhhbmRsZXJJZCwgbm9kZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICApO1xuICAgIHByaXZhdGUgZHJhZ1ByZXZpZXcgPSBuZXcgUmVjb25uZWN0b3I8RHJhZ1ByZXZpZXdPcHRpb25zPihcbiAgICAgICAgKGhhbmRsZXJJZCwgbm9kZSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFja2VuZC5jb25uZWN0RHJhZ1ByZXZpZXcoaGFuZGxlcklkLCBub2RlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhY2tlbmQ6IEJhY2tlbmQpIHt9XG5cbiAgICBwdWJsaWMgcmVjZWl2ZUhhbmRsZXJJZChoYW5kbGVySWQ6IElkZW50aWZpZXIgfCBudWxsKSB7XG4gICAgICAgIGlmIChoYW5kbGVySWQgPT09IHRoaXMuY3VycmVudEhhbmRsZXJJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudEhhbmRsZXJJZCA9IGhhbmRsZXJJZDtcbiAgICAgICAgdGhpcy5kcmFnU291cmNlLnJlY29ubmVjdChoYW5kbGVySWQpO1xuICAgICAgICB0aGlzLmRyYWdQcmV2aWV3LnJlY29ubmVjdChoYW5kbGVySWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBob29rczogRHJhZ1NvdXJjZUNvbm5lY3RvciA9IHtcbiAgICAgICAgZHJhZ1NvdXJjZTogdGhpcy5kcmFnU291cmNlLmhvb2ssXG4gICAgICAgIGRyYWdQcmV2aWV3OiB0aGlzLmRyYWdQcmV2aWV3Lmhvb2ssXG4gICAgfTtcblxuICAgIHB1YmxpYyByZWNvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuZHJhZ1NvdXJjZS5yZWNvbm5lY3QodGhpcy5jdXJyZW50SGFuZGxlcklkKTtcbiAgICAgICAgdGhpcy5kcmFnUHJldmlldy5yZWNvbm5lY3QodGhpcy5jdXJyZW50SGFuZGxlcklkKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNvdXJjZUNvbm5lY3RvcihiYWNrZW5kOiBCYWNrZW5kKSB7XG4gICAgcmV0dXJuIG5ldyBTb3VyY2VDb25uZWN0b3IoYmFja2VuZCk7XG59XG4iXX0=