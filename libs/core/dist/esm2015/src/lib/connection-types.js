/**
 * @module 1-Top-Level
 */
/** a second comment */
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"connection-types.js","sourceRoot":"ng://@rednax/core/","sources":["src/lib/connection-types.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,uBAAuB","sourcesContent":["/**\n * @module 1-Top-Level\n */\n/** a second comment */\n\nimport { DropTargetMonitor } from './target-monitor';\nimport { DragSourceMonitor } from './source-monitor';\nimport { TypeOrTypeArray } from './type-ish';\nimport { Observable, TeardownLogic } from 'rxjs';\nimport { DragLayerMonitor } from './layer-monitor';\nimport { DragSourceOptions, DragPreviewOptions } from './connectors';\nimport { Subscription, SubscriptionLike } from 'rxjs';\n\n/**\n * A base type to represent a DOM connection.\n */\nexport interface ConnectionBase<TMonitor> extends SubscriptionLike {\n    /**\n   * A connection maintains a subscription to `dnd-core`'s drag state\n   * changes. This function is how you are notified of those changes.\n   *\n   * This function is essentially RxJS `Observable.map` with one small\n   * optimization: it runs the output of\n   * the function you provide through `distinctUntilChanged`, and checks\n   * reference equality (`===`) for scalars and `shallowEqual` for Objects.\n   *\n   * Because of #2, you can happily emulate `react-dnd`-style code like:\n\n```typescript\ncollected$ = this.target.listen(monitor => ({\n  isDragging: monitor.isDragging(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n}));\n```\n\n   * ... in which case you probably want to use the `*ngIf as` pattern for\n   *  grouping subscriptions into one bound template variable:\n\n```html\n<ng-container *ngIf=\"collected$ | async as c\">\n  <p>{{c.isDragging ? 'dragging': null}}<p>\n  ...\n</ng-container>\n```\n\n   * You can also subscribe one-by-one, with `isDragging$ = listen(m => m.isDragging())`.\n   */\n    listen<O>(mapTo: (monitor: TMonitor) => O): Observable<O>;\n\n    /**\n     * This method **MUST** be called, however you choose to, when `ngOnDestroy()` fires.\n     * If you don't, you will leave subscriptions hanging around that will fire\n     * callbacks on components that no longer exist.\n     */\n    unsubscribe(): void;\n\n    /**\n     * Same as RxJS Subscription.add().\n     * Useful, for example, for writing wrappers for the {@link SkyhookDndService} methods,\n     * which might internally listen()/subscribe to {@link DropTargetSpec#hover} and provide\n     * a convenient callback after you hover without dropping or exiting for a specified\n     * duration. That would require the following pattern:\n     *\n```typescript\nfunction wrapper(dndService, types, spec, callback) {\n    let subj = new Subject();\n    let dt = dndService.dropTarget(types, {\n        ...spec,\n        hover: monitor => {\n            subj.next();\n            spec.hover && spec.hover(monitor);\n        }\n    });\n    // runs the callback until the returned connection\n    // is destroyed via unsubscribe()\n    dt.add(subj.pipe( ... ).subscribe(callback))\n    return dt;\n}\n```\n     */\n    add(teardown: TeardownLogic): Subscription;\n}\n\n/**\n * Represents one drop target and its behaviour, that can listen to the state\n * and connect to a DOM element.\n *\n * To create one, refer to {@link SkyhookDndService#dropTarget}.\n */\nexport interface DropTarget<Item = {}, DropResult = {}>\n    extends ConnectionBase<DropTargetMonitor<Item, DropResult>> {\n    /** Use this method to have a dynamically typed target. If no type has\n     *  previously been set, it creates the subscription and allows the\n     *  `[dragSource]` DOM element to be connected. If you do not need to\n     *  dynamically update the type, you can set it once via the\n     *  {@link DropTargetSpec#types} property.\n     *\n     *  See {@link DragSource#setType} for an example of how to set\n     *  a dynamic type, for it is very similar here.\n     */\n    setTypes(type: TypeOrTypeArray): void;\n\n    /** This function allows you to connect a DOM node to your `DropTarget`.\n     *  You will not usually need to call this directly;\n     *  it is more easily handled by the directives.\n     *\n     *  The subscription returned is automatically unsubscribed when the connection is made.\n     *  This may be immediate if the `DropTarget` already has a type.\n     */\n    connectDropTarget(elementOrNode: Node): Subscription;\n\n    /**\n     * Returns the drop target ID that can be used to simulate the drag and drop events with the testing backend. */\n    getHandlerId(): any;\n}\n\n/**\nLike {@link DropTarget}, it can be used just for subscribing to\ndrag state information related to a particular item type or list of types.\nYou do not have to connect it to a DOM element if that's all you want.\n\nTo create one, refer to {@link SkyhookDndService#dragSource}.\n */\nexport interface DragSource<Item, DropResult = {}>\n    extends ConnectionBase<DragSourceMonitor<Item, DropResult>> {\n    /** Use this method to have a dynamically typed source. If no type has\n   *  previously been set, it creates the subscription and allows the\n   *  `[dragSource]` DOM element to be connected. If you do not need to\n   *  dynamically update the type, you can set it once via the\n   *  {@link DragSourceSpec#type} property.\n   *\n   *  If you wish to have a dynamic type based on an `@Input()` property, for\n   *  example, you must call `setType()` in either of your component's\n   *  `ngOnInit` or `ngOnChanges` methods:\n\n```typescript\n@Input() type: string;\n@Input() model: { parentId: number; name: string; };\ntarget = this.dnd.dragSource(null, {\n  // ...\n});\nngOnChanges() {\n  // use what your parent component told you to\n  this.target.setType(this.type);\n  // or create groupings on the fly\n  this.target.setType(\"PARENT_\" + this.model.parentId.toString());\n}\n```\n\n   * It may be more convenient or easier to understand if you write:\n\n```typescript\n@Input() set type(t) {\n  this.source.setType(t);\n}\nsource = this.dnd.dragSource(null, {\n  beginDrag: () => ({ ... })\n});\n```\n\n   */\n    setType(type: string | symbol): void;\n\n    /** This function allows you to connect a DOM node to your `DragSource`.\n     *  You will not usually need to call this directly;\n     *  it is more easily handled by the directives.\n     *\n     *  The subscription returned is automatically unsubscribed when the connection is made.\n     *  This may be immediate if the `DragSource` already has a type.\n     */\n    connectDragSource(\n        elementOrNode: Node,\n        options?: DragSourceOptions\n    ): Subscription;\n\n    /** This function allows you to connect a DOM node to your `DragSource` as a **preview**.\n     *  You will not usually need to call this directly;\n     *  it is more easily handled by the directives.\n     *\n     *  You might use an `ElementRef.nativeElement`, or even an\n     *  [`Image`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image).\n     *\n```ts\nconst img = new Image();\nimg.onload = this.source.connectDragPreview(img);\nimg.src = '...';\n```\n     *\n     *  The subscription returned is automatically unsubscribed when the connection is made.\n     *  This may be immediate if the `DragSource` already has a type.\n     */\n    connectDragPreview(\n        elementOrNode: Node,\n        options?: DragPreviewOptions\n    ): Subscription;\n\n    /**\n     * Returns the drag source ID that can be used to simulate the drag and drop events with the testing backend. */\n    getHandlerId(): any;\n}\n\n/**\nFor many use cases, the default rendering of the HTML5 backend should suffice.\nHowever, its drag preview has certain limitations. For example, it has to be an\nexisting node screenshot or an image, and it cannot change midflight.\n\nSometimes you might want to perform the custom rendering. This also becomes\nnecessary if you're using a custom backend. `DragLayer` lets you perform the\nrendering of the drag preview yourself.\n\nA drag layer is a special subscriber to the global drag state. It is called\na 'layer', not just a subscriber, because it is typically used to render custom\nelements that follow the mouse, above all other elements. The data flows like\nso:\n\n```\ndrag start => global state => drag source => no preview\n                              => drag layer  => preview rendered on the spot\ndrag moved => global state => drag layer  => preview moves\ndrag ends  => global state => drag layer  => preview erased\n```\n\nTo use a drag layer as designed:\n\n1. Create a drag layer: `SkyhookDndService.dragLayer`. Make sure to unsubscribe from\n   it in `ngOnDestroy()`.\n\n2. Listen to global drag state changes with `DragLayer.listen`. These are all available on `DragLayerMonitor`:\n   whether something is being dragged, what type it is, where the drag started, where the dragged element is now.\n\n3. If dragging, render a custom preview under the current mouse position,\n   depending on the item type, in a `position: fixed` 'layer'. You may like to\n   use an `*ngSwitch` on the type, rather than one drag layer per type, simply\n   to reduce code duplication.\n\n\nYou can see an example of a drag layer over on the `Examples` page.\n\nOne piece of advice for using drag layers effectively is to separate 'smart' and\n'dumb' components. If you have one component purely for visuals, which does all\ninput through `@Input()` and all interactivity through `@Output()` events, then\nyou can reuse it to display a drag preview based on either data in the item from\n`DragSourceSpec.beginDrag`, or supplied by a 'smart' component which pulls\ndata from somewhere else using only an `id`. This practice is even more\nimportant if you are using, or planning on using, anything other than the HTML5\nbackend, because no other backend provides automatic previews. In those cases\nyou must handle every draggable `type` in a drag layer to have any previews at\nall.\n\nOr, you could just use [@rednax/multi-backend](../@rednax/multi-backend/).\n\n */\nexport interface DragLayer<Item = any>\n    extends ConnectionBase<DragLayerMonitor<Item>> {\n    /** For listen functions in general, see {@link ConnectionBase#listen}.\n     *\n     *  This listen function is called any time the global drag state\n     *  changes, including the coordinate changes, so that your component can\n     *  provide a timely updated custom drag preview. You can ask the monitor for\n     *  the client coordinates of the dragged item. Read the {@link DragLayerMonitor}\n     *  docs to see all the different possibile coordinates you might subscribe\n     *  to.\n     */\n    listen<O>(mapTo: (monitor: DragLayerMonitor<Item>) => O): Observable<O>;\n}\n"]}