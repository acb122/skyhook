export class Target {
    constructor(spec, zone, monitor) {
        this.spec = spec;
        this.zone = zone;
        this.monitor = monitor;
        this.monitor = monitor;
    }
    withChangeDetection(fn) {
        let x = fn();
        this.zone.scheduleMicroTask('DropTarget', () => { });
        return x;
    }
    receiveMonitor(monitor) {
        this.monitor = monitor;
    }
    canDrop() {
        if (!this.spec.canDrop) {
            return true;
        }
        // don't run isDragging in the zone. Should be a pure function of `this`.
        return this.spec.canDrop(this.monitor);
    }
    hover() {
        if (!this.spec.hover) {
            return;
        }
        this.withChangeDetection(() => {
            this.spec.hover && this.spec.hover(this.monitor);
        });
    }
    drop() {
        if (!this.spec.drop) {
            return undefined;
        }
        return this.withChangeDetection(() => {
            const dropResult = this.spec.drop && this.spec.drop(this.monitor);
            return dropResult;
        });
    }
}
export function createTargetFactory(spec, zone) {
    return function createTarget(monitor) {
        return new Target(spec, zone, monitor);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlVGFyZ2V0RmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByZWRuYXgvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9saWIvaW50ZXJuYWwvY3JlYXRlVGFyZ2V0RmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLE9BQU8sTUFBTTtJQUVmLFlBQ1ksSUFBb0IsRUFDcEIsSUFBVSxFQUNWLE9BQTBCO1FBRjFCLFNBQUksR0FBSixJQUFJLENBQWdCO1FBQ3BCLFNBQUksR0FBSixJQUFJLENBQU07UUFDVixZQUFPLEdBQVAsT0FBTyxDQUFtQjtRQUVsQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMzQixDQUFDO0lBRUQsbUJBQW1CLENBQUksRUFBVztRQUM5QixJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUVELGNBQWMsQ0FBQyxPQUFZO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCx5RUFBeUU7UUFDekUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDbEIsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRTtZQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsSUFBSTtRQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNqQixPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUVELE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEUsT0FBTyxVQUFVLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsSUFBb0IsRUFBRSxJQUFVO0lBQ2hFLE9BQU8sU0FBUyxZQUFZLENBQUMsT0FBWTtRQUNyQyxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERyb3BUYXJnZXQgfSBmcm9tICdkbmQtY29yZSc7XG5pbXBvcnQgeyBEcm9wVGFyZ2V0TW9uaXRvciB9IGZyb20gJy4uL3RhcmdldC1tb25pdG9yJztcbmltcG9ydCB7IERyb3BUYXJnZXRTcGVjIH0gZnJvbSAnLi4vZHJvcC10YXJnZXQtc3BlY2lmaWNhdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBUYXJnZXQgaW1wbGVtZW50cyBEcm9wVGFyZ2V0IHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHNwZWM6IERyb3BUYXJnZXRTcGVjLFxuICAgICAgICBwcml2YXRlIHpvbmU6IFpvbmUsXG4gICAgICAgIHByaXZhdGUgbW9uaXRvcjogRHJvcFRhcmdldE1vbml0b3JcbiAgICApIHtcbiAgICAgICAgdGhpcy5tb25pdG9yID0gbW9uaXRvcjtcbiAgICB9XG5cbiAgICB3aXRoQ2hhbmdlRGV0ZWN0aW9uPFQ+KGZuOiAoKSA9PiBUKTogVCB7XG4gICAgICAgIGxldCB4ID0gZm4oKTtcbiAgICAgICAgdGhpcy56b25lLnNjaGVkdWxlTWljcm9UYXNrKCdEcm9wVGFyZ2V0JywgKCkgPT4geyB9KTtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgcmVjZWl2ZU1vbml0b3IobW9uaXRvcjogYW55KSB7XG4gICAgICAgIHRoaXMubW9uaXRvciA9IG1vbml0b3I7XG4gICAgfVxuXG4gICAgY2FuRHJvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNwZWMuY2FuRHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkb24ndCBydW4gaXNEcmFnZ2luZyBpbiB0aGUgem9uZS4gU2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBgdGhpc2AuXG4gICAgICAgIHJldHVybiB0aGlzLnNwZWMuY2FuRHJvcCh0aGlzLm1vbml0b3IpO1xuICAgIH1cblxuICAgIGhvdmVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3BlYy5ob3Zlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2l0aENoYW5nZURldGVjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNwZWMuaG92ZXIgJiYgdGhpcy5zcGVjLmhvdmVyKHRoaXMubW9uaXRvcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRyb3AoKSB7XG4gICAgICAgIGlmICghdGhpcy5zcGVjLmRyb3ApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy53aXRoQ2hhbmdlRGV0ZWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRyb3BSZXN1bHQgPSB0aGlzLnNwZWMuZHJvcCAmJiB0aGlzLnNwZWMuZHJvcCh0aGlzLm1vbml0b3IpO1xuICAgICAgICAgICAgcmV0dXJuIGRyb3BSZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhcmdldEZhY3Rvcnkoc3BlYzogRHJvcFRhcmdldFNwZWMsIHpvbmU6IFpvbmUpOiBhbnkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVUYXJnZXQobW9uaXRvcjogYW55KTogRHJvcFRhcmdldCB7XG4gICAgICAgIHJldHVybiBuZXcgVGFyZ2V0KHNwZWMsIHpvbmUsIG1vbml0b3IpO1xuICAgIH07XG59XG4iXX0=