import { NgModule, NgZone } from '@angular/core';
import { SkyhookDndService } from './connector.service';
import { DndDirective, DragSourceDirective, DropTargetDirective, DragPreviewDirective, } from './dnd.directive';
import { DRAG_DROP_BACKEND, DRAG_DROP_BACKEND_OPTIONS, DRAG_DROP_BACKEND_DEBUG_MODE, DRAG_DROP_MANAGER, DRAG_DROP_GLOBAL_CONTEXT, } from './tokens';
import { createDragDropManager, } from 'dnd-core';
import { invariant } from './internal/invariant';
/** @ignore */
export function unpackBackendForEs5Users(backendOrModule) {
    // Auto-detect ES6 default export for people still using ES5
    let backend = backendOrModule;
    if (typeof backend === 'object' && typeof backend.default === 'function') {
        backend = backend.default;
    }
    invariant(typeof backend === 'function', 'Expected the backend to be a function or an ES6 module exporting a default function. ' +
        'Read more: http://react-dnd.github.io/react-dnd/docs-drag-drop-context.html');
    return backend;
}
// TODO allow injecting window
/** @ignore */
// @dynamic
export function managerFactory(backendFactory, zone, context, backendOptions, debugMode) {
    backendFactory = unpackBackendForEs5Users(backendFactory);
    return zone.runOutsideAngular(() => createDragDropManager(backendFactory, context, backendOptions, debugMode));
}
/** @ignore */
export function getGlobalContext() {
    return typeof global !== 'undefined' ? global : window;
}
/** @ignore */
const EXPORTS = [
    DndDirective,
    DragSourceDirective,
    DropTargetDirective,
    DragPreviewDirective,
];
// @dynamic
export class SkyhookDndModule {
    static forRoot(backendOrBackendFactory) {
        return {
            ngModule: SkyhookDndModule,
            providers: [
                {
                    provide: DRAG_DROP_BACKEND,
                    // whichever one they have provided, the other will be undefined
                    useValue: backendOrBackendFactory.backend,
                    useFactory: backendOrBackendFactory
                        .backendFactory,
                },
                {
                    provide: DRAG_DROP_BACKEND_OPTIONS,
                    // whichever one they have provided, the other will be undefined
                    useValue: backendOrBackendFactory.options,
                },
                {
                    provide: DRAG_DROP_BACKEND_DEBUG_MODE,
                    // whichever one they have provided, the other will be undefined
                    useValue: backendOrBackendFactory.debug,
                },
                {
                    provide: DRAG_DROP_GLOBAL_CONTEXT,
                    useFactory: getGlobalContext,
                },
                {
                    provide: DRAG_DROP_MANAGER,
                    useFactory: managerFactory,
                    deps: [
                        DRAG_DROP_BACKEND,
                        NgZone,
                        DRAG_DROP_GLOBAL_CONTEXT,
                        DRAG_DROP_BACKEND_OPTIONS,
                        DRAG_DROP_BACKEND_DEBUG_MODE,
                    ],
                },
                SkyhookDndService,
            ],
        };
    }
}
SkyhookDndModule.decorators = [
    { type: NgModule, args: [{
                declarations: EXPORTS,
                exports: EXPORTS,
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByZWRuYXgvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9saWIvZG5kLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUNILFlBQVksRUFDWixtQkFBbUIsRUFDbkIsbUJBQW1CLEVBQ25CLG9CQUFvQixHQUN2QixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFDSCxpQkFBaUIsRUFDakIseUJBQXlCLEVBQ3pCLDRCQUE0QixFQUM1QixpQkFBaUIsRUFDakIsd0JBQXdCLEdBQzNCLE1BQU0sVUFBVSxDQUFDO0FBRWxCLE9BQU8sRUFDSCxxQkFBcUIsR0FHeEIsTUFBTSxVQUFVLENBQUM7QUFFbEIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWpELGNBQWM7QUFDZCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsZUFBb0I7SUFDekQsNERBQTREO0lBQzVELElBQUksT0FBTyxHQUFHLGVBQWUsQ0FBQztJQUM5QixJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLE9BQU8sQ0FBQyxPQUFPLEtBQUssVUFBVSxFQUFFO1FBQ3RFLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0tBQzdCO0lBQ0QsU0FBUyxDQUNMLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFDN0IsdUZBQXVGO1FBQ25GLDZFQUE2RSxDQUNwRixDQUFDO0lBQ0YsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUVELDhCQUE4QjtBQUM5QixjQUFjO0FBQ2QsV0FBVztBQUNYLE1BQU0sVUFBVSxjQUFjLENBQzFCLGNBQThCLEVBQzlCLElBQVksRUFDWixPQUFZLEVBQ1osY0FBb0IsRUFDcEIsU0FBbUI7SUFFbkIsY0FBYyxHQUFHLHdCQUF3QixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzFELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUMvQixxQkFBcUIsQ0FDakIsY0FBYyxFQUNkLE9BQU8sRUFDUCxjQUFjLEVBQ2QsU0FBUyxDQUNaLENBQ0osQ0FBQztBQUNOLENBQUM7QUFJRCxjQUFjO0FBQ2QsTUFBTSxVQUFVLGdCQUFnQjtJQUM1QixPQUFPLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxNQUFjLENBQUM7QUFDcEUsQ0FBQztBQXVERCxjQUFjO0FBQ2QsTUFBTSxPQUFPLEdBQUc7SUFDWixZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixvQkFBb0I7Q0FDdkIsQ0FBQztBQUVGLFdBQVc7QUFLWCxNQUFNLE9BQU8sZ0JBQWdCO0lBQ3pCLE1BQU0sQ0FBQyxPQUFPLENBQ1YsdUJBQTJEO1FBRTNELE9BQU87WUFDSCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsaUJBQWlCO29CQUMxQixnRUFBZ0U7b0JBQ2hFLFFBQVEsRUFBRyx1QkFBd0MsQ0FBQyxPQUFPO29CQUMzRCxVQUFVLEVBQUcsdUJBQStDO3lCQUN2RCxjQUFjO2lCQUN0QjtnQkFDRDtvQkFDSSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxnRUFBZ0U7b0JBQ2hFLFFBQVEsRUFBRyx1QkFBd0MsQ0FBQyxPQUFPO2lCQUM5RDtnQkFDRDtvQkFDSSxPQUFPLEVBQUUsNEJBQTRCO29CQUNyQyxnRUFBZ0U7b0JBQ2hFLFFBQVEsRUFBRSx1QkFBdUIsQ0FBQyxLQUFLO2lCQUMxQztnQkFDRDtvQkFDSSxPQUFPLEVBQUUsd0JBQXdCO29CQUNqQyxVQUFVLEVBQUUsZ0JBQWdCO2lCQUMvQjtnQkFDRDtvQkFDSSxPQUFPLEVBQUUsaUJBQWlCO29CQUMxQixVQUFVLEVBQUUsY0FBYztvQkFDMUIsSUFBSSxFQUFFO3dCQUNGLGlCQUFpQjt3QkFDakIsTUFBTTt3QkFDTix3QkFBd0I7d0JBQ3hCLHlCQUF5Qjt3QkFDekIsNEJBQTRCO3FCQUMvQjtpQkFDSjtnQkFDRCxpQkFBaUI7YUFDcEI7U0FDSixDQUFDO0lBQ04sQ0FBQzs7O1lBOUNKLFFBQVEsU0FBQztnQkFDTixZQUFZLEVBQUUsT0FBTztnQkFDckIsT0FBTyxFQUFFLE9BQU87YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFNreWhvb2tEbmRTZXJ2aWNlIH0gZnJvbSAnLi9jb25uZWN0b3Iuc2VydmljZSc7XG5pbXBvcnQge1xuICAgIERuZERpcmVjdGl2ZSxcbiAgICBEcmFnU291cmNlRGlyZWN0aXZlLFxuICAgIERyb3BUYXJnZXREaXJlY3RpdmUsXG4gICAgRHJhZ1ByZXZpZXdEaXJlY3RpdmUsXG59IGZyb20gJy4vZG5kLmRpcmVjdGl2ZSc7XG5cbmltcG9ydCB7XG4gICAgRFJBR19EUk9QX0JBQ0tFTkQsXG4gICAgRFJBR19EUk9QX0JBQ0tFTkRfT1BUSU9OUyxcbiAgICBEUkFHX0RST1BfQkFDS0VORF9ERUJVR19NT0RFLFxuICAgIERSQUdfRFJPUF9NQU5BR0VSLFxuICAgIERSQUdfRFJPUF9HTE9CQUxfQ09OVEVYVCxcbn0gZnJvbSAnLi90b2tlbnMnO1xuXG5pbXBvcnQge1xuICAgIGNyZWF0ZURyYWdEcm9wTWFuYWdlcixcbiAgICBCYWNrZW5kRmFjdG9yeSxcbiAgICBEcmFnRHJvcE1hbmFnZXIsXG59IGZyb20gJ2RuZC1jb3JlJztcblxuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnLi9pbnRlcm5hbC9pbnZhcmlhbnQnO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVucGFja0JhY2tlbmRGb3JFczVVc2VycyhiYWNrZW5kT3JNb2R1bGU6IGFueSkge1xuICAgIC8vIEF1dG8tZGV0ZWN0IEVTNiBkZWZhdWx0IGV4cG9ydCBmb3IgcGVvcGxlIHN0aWxsIHVzaW5nIEVTNVxuICAgIGxldCBiYWNrZW5kID0gYmFja2VuZE9yTW9kdWxlO1xuICAgIGlmICh0eXBlb2YgYmFja2VuZCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGJhY2tlbmQuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBiYWNrZW5kID0gYmFja2VuZC5kZWZhdWx0O1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiBiYWNrZW5kID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAnRXhwZWN0ZWQgdGhlIGJhY2tlbmQgdG8gYmUgYSBmdW5jdGlvbiBvciBhbiBFUzYgbW9kdWxlIGV4cG9ydGluZyBhIGRlZmF1bHQgZnVuY3Rpb24uICcgK1xuICAgICAgICAgICAgJ1JlYWQgbW9yZTogaHR0cDovL3JlYWN0LWRuZC5naXRodWIuaW8vcmVhY3QtZG5kL2RvY3MtZHJhZy1kcm9wLWNvbnRleHQuaHRtbCdcbiAgICApO1xuICAgIHJldHVybiBiYWNrZW5kO1xufVxuXG4vLyBUT0RPIGFsbG93IGluamVjdGluZyB3aW5kb3dcbi8qKiBAaWdub3JlICovXG4vLyBAZHluYW1pY1xuZXhwb3J0IGZ1bmN0aW9uIG1hbmFnZXJGYWN0b3J5KFxuICAgIGJhY2tlbmRGYWN0b3J5OiBCYWNrZW5kRmFjdG9yeSxcbiAgICB6b25lOiBOZ1pvbmUsXG4gICAgY29udGV4dDogYW55LFxuICAgIGJhY2tlbmRPcHRpb25zPzogYW55LFxuICAgIGRlYnVnTW9kZT86IGJvb2xlYW5cbik6IERyYWdEcm9wTWFuYWdlciB7XG4gICAgYmFja2VuZEZhY3RvcnkgPSB1bnBhY2tCYWNrZW5kRm9yRXM1VXNlcnMoYmFja2VuZEZhY3RvcnkpO1xuICAgIHJldHVybiB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+XG4gICAgICAgIGNyZWF0ZURyYWdEcm9wTWFuYWdlcihcbiAgICAgICAgICAgIGJhY2tlbmRGYWN0b3J5LFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGJhY2tlbmRPcHRpb25zLFxuICAgICAgICAgICAgZGVidWdNb2RlXG4gICAgICAgIClcbiAgICApO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZGVjbGFyZSB2YXIgZ2xvYmFsOiBhbnk7XG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdsb2JhbENvbnRleHQoKTogYW55IHtcbiAgICByZXR1cm4gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiAod2luZG93IGFzIGFueSk7XG59XG5cbi8qXG4gKiBIb2xkIG9uLCB0aGlzIGdldHMgYSBsaXR0bGUgY29uZnVzaW5nLlxuICpcbiAqIEEgZG5kLWNvcmUgQmFja2VuZCBoYXMgbG90cyBvZiB1c2VmdWwgbWV0aG9kcyBmb3IgcmVnaXN0ZXJpbmcgZWxlbWVudHMgYW5kIGZpcmluZyBldmVudHMuXG4gKiBIb3dldmVyLCBiYWNrZW5kcyBhcmUgbm90IGRpc3RyaWJ1dGVkIHRoaXMgd2F5LlxuICogVGhlIEhUTUw1QmFja2VuZCBhbmQgdGhlIFRlc3RCYWNrZW5kLCB3aGVuIGltcG9ydGVkIHsgZGVmYXVsdCBhcyBIVE1MNUJhY2tlbmQgfSwgYXJlIG5vdCBCYWNrZW5kcywgdGhleSBhcmVcbiAqIGZ1bmN0aW9uczogKG1hbmFnZXI6IERyYWdEcm9wTWFuYWdlcikgPT4gQmFja2VuZC5cbiAqIFRoaXMgaXMgbm93IGtub3duIGFzIGEgQmFja2VuZEZhY3RvcnkgdW5kZXIgZG5kLWNvcmUgNCsgdHlwZXNjcmlwdCBhbm5vdGF0aW9ucy5cbiAqXG4gKiBIb3dldmVyLCBBbmd1bGFyIGhhcyBpdHMgb3duIGNvbmNlcHRpb24gb2Ygd2hhdCBhIGZhY3RvcnkgaXMgZm9yIEFPVC4gVGhpcyBpcyB0aGUgJ2ZhY3RvcnknXG4gKiB0byB3aGljaCBCYWNrZW5kRmFjdG9yeUlucHV0IHJlZmVycyBiZWxvdy5cbiAqIFNvbWV0aW1lcywgdXNlcnMgd2lsbCB3YW50IHRvIHByZWNvbmZpZ3VyZSBhIGJhY2tlbmQgKGxpa2UgVG91Y2hCYWNrZW5kLCBvciBNdWx0aUJhY2tlbmQpLlxuICogRm9yIHRoaXMsIHRoZXkgbmVlZCB0byBleHBvcnQgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjb25maWd1cmVkIEJhY2tlbmRGYWN0b3J5XG4gKiBhbmQgcGFzcyBpdCBpbiBhcyAgeyBiYWNrZW5kRmFjdG9yeTogZXhwb3J0ZWRGdW5jdGlvbiB9LlxuICovXG5cbi8qKiBVc2UgdGhpcyBmb3IgcHJvdmlkaW5nIHBsYWluIGJhY2tlbmRzIHRvIHtAbGluayBTa3lob29rRG5kTW9kdWxlI2ZvclJvb3R9LiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYWNrZW5kSW5wdXQge1xuICAgIC8qKiBBIHBsYWluIGJhY2tlbmQsIGZvciBleGFtcGxlIHRoZSBIVE1MNUJhY2tlbmQuICovXG4gICAgYmFja2VuZDogQmFja2VuZEZhY3Rvcnk7XG4gICAgb3B0aW9ucz86IGFueTtcbiAgICBkZWJ1Zz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVXNlIHRoaXMgZm9yIHByb3ZpZGluZyBiYWNrZW5kcyB0aGF0IG5lZWQgY29uZmlndXJpbmcgYmVmb3JlIHVzZSB0byB7QGxpbmsgU2t5aG9va0RuZE1vZHVsZSNmb3JSb290fS5cbiAqXG4gKiBGb3IgdXNlIHdpdGggdGhlIE11bHRpQmFja2VuZDpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBjcmVhdGVEZWZhdWx0TXVsdGlCYWNrZW5kIH0gZnJvbSAnQHJlZG5heC9tdWx0aS1iYWNrZW5kJztcbiAqIC8vIC4uLlxuICogU2t5aG9va0RuZE1vZHVsZS5mb3JSb290KHsgYmFja2VuZEZhY3Rvcnk6IGNyZWF0ZURlZmF1bHRNdWx0aUJhY2tlbmQgfSlcbiAqIGBgYFxuICpcbiAqIG9yIHdpdGggdGhlIFRvdWNoQmFja2VuZCBieSBpdHNlbGY6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRvdWNoQmFja2VuZCgpIHtcbiAqICAgICByZXR1cm4gVG91Y2hCYWNrZW5kKHsgZW5hYmxlTW91c2VFdmVudHM6IGZhbHNlIH0pO1xuICogfVxuICogLy8gLi4uXG4gKiBTa3lob29rRG5kTW9kdWxlLmZvclJvb3QoeyBiYWNrZW5kRmFjdG9yeTogY3JlYXRlVG91Y2hCYWNrZW5kIH0pXG4gKiBgYGBcbiAqXG4gKiBZb3UgaGF2ZSB0byBkbyB0aGlzIHRvIHJldGFpbiBBT1QgY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYWNrZW5kRmFjdG9yeUlucHV0IHtcbiAgICAvKiogU2VlIGFib3ZlLiAqL1xuICAgIGJhY2tlbmRGYWN0b3J5OiAoKSA9PiBCYWNrZW5kRmFjdG9yeTtcbiAgICBkZWJ1Zz86IGJvb2xlYW47XG59XG5cbi8qKiBAaWdub3JlICovXG5jb25zdCBFWFBPUlRTID0gW1xuICAgIERuZERpcmVjdGl2ZSxcbiAgICBEcmFnU291cmNlRGlyZWN0aXZlLFxuICAgIERyb3BUYXJnZXREaXJlY3RpdmUsXG4gICAgRHJhZ1ByZXZpZXdEaXJlY3RpdmUsXG5dO1xuXG4vLyBAZHluYW1pY1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IEVYUE9SVFMsXG4gICAgZXhwb3J0czogRVhQT1JUUyxcbn0pXG5leHBvcnQgY2xhc3MgU2t5aG9va0RuZE1vZHVsZSB7XG4gICAgc3RhdGljIGZvclJvb3QoXG4gICAgICAgIGJhY2tlbmRPckJhY2tlbmRGYWN0b3J5OiBCYWNrZW5kSW5wdXQgfCBCYWNrZW5kRmFjdG9yeUlucHV0XG4gICAgKTogTW9kdWxlV2l0aFByb3ZpZGVyczxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBTa3lob29rRG5kTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBEUkFHX0RST1BfQkFDS0VORCxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2hldmVyIG9uZSB0aGV5IGhhdmUgcHJvdmlkZWQsIHRoZSBvdGhlciB3aWxsIGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogKGJhY2tlbmRPckJhY2tlbmRGYWN0b3J5IGFzIEJhY2tlbmRJbnB1dCkuYmFja2VuZCxcbiAgICAgICAgICAgICAgICAgICAgdXNlRmFjdG9yeTogKGJhY2tlbmRPckJhY2tlbmRGYWN0b3J5IGFzIEJhY2tlbmRGYWN0b3J5SW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYmFja2VuZEZhY3RvcnksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IERSQUdfRFJPUF9CQUNLRU5EX09QVElPTlMsXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoZXZlciBvbmUgdGhleSBoYXZlIHByb3ZpZGVkLCB0aGUgb3RoZXIgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6IChiYWNrZW5kT3JCYWNrZW5kRmFjdG9yeSBhcyBCYWNrZW5kSW5wdXQpLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IERSQUdfRFJPUF9CQUNLRU5EX0RFQlVHX01PREUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoZXZlciBvbmUgdGhleSBoYXZlIHByb3ZpZGVkLCB0aGUgb3RoZXIgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6IGJhY2tlbmRPckJhY2tlbmRGYWN0b3J5LmRlYnVnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBEUkFHX0RST1BfR0xPQkFMX0NPTlRFWFQsXG4gICAgICAgICAgICAgICAgICAgIHVzZUZhY3Rvcnk6IGdldEdsb2JhbENvbnRleHQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IERSQUdfRFJPUF9NQU5BR0VSLFxuICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiBtYW5hZ2VyRmFjdG9yeSxcbiAgICAgICAgICAgICAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgRFJBR19EUk9QX0JBQ0tFTkQsXG4gICAgICAgICAgICAgICAgICAgICAgICBOZ1pvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBEUkFHX0RST1BfR0xPQkFMX0NPTlRFWFQsXG4gICAgICAgICAgICAgICAgICAgICAgICBEUkFHX0RST1BfQkFDS0VORF9PUFRJT05TLFxuICAgICAgICAgICAgICAgICAgICAgICAgRFJBR19EUk9QX0JBQ0tFTkRfREVCVUdfTU9ERSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFNreWhvb2tEbmRTZXJ2aWNlLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=