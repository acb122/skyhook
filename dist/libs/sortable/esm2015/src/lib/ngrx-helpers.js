export var SortableEvents;
(function (SortableEvents) {
    SortableEvents["BeginDrag"] = "BeginDrag";
    SortableEvents["Hover"] = "Hover";
    SortableEvents["Drop"] = "Drop";
    SortableEvents["EndDrag"] = "EndDrag";
})(SortableEvents || (SortableEvents = {}));
export class BeginDragAction {
    constructor(type, item) {
        this.type = type;
        this.item = item;
        this.event = SortableEvents.BeginDrag;
    }
}
export class HoverAction {
    constructor(type, item) {
        this.type = type;
        this.item = item;
        this.event = SortableEvents.Hover;
    }
}
export class DropAction {
    constructor(type, item) {
        this.type = type;
        this.item = item;
        this.event = SortableEvents.Drop;
    }
}
export class EndDragAction {
    constructor(type, item) {
        this.type = type;
        this.item = item;
        this.event = SortableEvents.EndDrag;
    }
}
export class NgRxSortable {
    /**
     * @param store      An @ngrx store instance.
     * @param actionType The type in your own @ngrx/store `ActionTypes` enum you want the sortable actions to use.
     * @param configure  You must provide `trackBy` and `getList` functions here. Hopefully your `getList` will select from the store you passed!
     * */
    constructor(store, actionType, configure) {
        this.store = store;
        this.actionType = actionType;
        // We now implement the SortableSpec interface by dispatching actions
        this.beginDrag = (item, _monitor) => {
            this.store.dispatch(new BeginDragAction(this.actionType, item));
        };
        this.hover = (item, _monitor) => {
            this.store.dispatch(new HoverAction(this.actionType, item));
        };
        this.drop = (item, _monitor) => {
            this.store.dispatch(new DropAction(this.actionType, item));
        };
        this.endDrag = (item, _monitor) => {
            this.store.dispatch(new EndDragAction(this.actionType, item));
        };
        if (configure.type !== undefined)
            this.type = configure.type;
        if (configure.accepts !== undefined)
            this.accepts = configure.accepts;
        if (configure.trackBy !== undefined)
            this.trackBy = configure.trackBy;
        if (configure.getList !== undefined)
            this.getList = configure.getList;
        if (configure.canDrag !== undefined)
            this.canDrag = configure.canDrag;
        if (configure.canDrop !== undefined)
            this.canDrop = configure.canDrop;
        if (configure.isDragging !== undefined)
            this.isDragging = configure.isDragging;
        if (configure.createData !== undefined)
            this.createData = configure.createData;
    }
}
//# sourceMappingURL=data:application/json;base64,