import { Directive, Input, ElementRef } from '@angular/core';
import { SkyhookDndService, } from '@rednax/core';
import { Size } from '../types';
import { Subscription } from 'rxjs';
import { getSuggester } from '../hoverTriggers';
import * as i0 from "@angular/core";
import * as i1 from "@rednax/core";
/** @ignore */
const _scheduleMicroTaskPolyfill = requestAnimationFrame ||
    webkitRequestAnimationFrame ||
    ((f) => setTimeout(f, 0));
export class SkyhookSortableRenderer {
    /** @ignore */
    constructor(dnd, el) {
        this.dnd = dnd;
        this.el = el;
        /** @ignore */
        this.subs = new Subscription();
        /** @ignore */
        this.sameIds = (data, other) => {
            return (data &&
                other.data &&
                this.spec.trackBy(data) === this.spec.trackBy(other.data));
        };
        this.target = this.dnd.dropTarget(null, {
            // this is a hover-only situation
            canDrop: () => false,
            hover: (monitor) => {
                this.hover(monitor);
            },
        }, this.subs);
        this.source = this.dnd.dragSource(null, {
            canDrag: (monitor) => {
                return this.getCanDrag(monitor);
            },
            isDragging: (monitor) => {
                return this.isDragging(monitor.getItem());
            },
            beginDrag: (monitor) => {
                const item = this.createItem();
                // Chromium bug since 2016: if you modify styles or DOM
                // synchronously within 'dragstart' handler, Chrome fires
                // a 'dragend' immediately.
                //
                // https://bugs.chromium.org/p/chromium/issues/detail?id=674882
                // although recommended Promise.resolve().then() doesn't work.
                this.spec &&
                    this.spec.beginDrag &&
                    _scheduleMicroTaskPolyfill(() => {
                        this.spec &&
                            this.spec.beginDrag &&
                            this.spec.beginDrag(item, monitor);
                    });
                return item;
            },
            endDrag: (monitor) => {
                const item = monitor.getItem();
                if (item) {
                    this.spec &&
                        this.spec.endDrag &&
                        this.spec.endDrag(item, monitor);
                }
            },
        }, this.subs);
        this.isDragging$ = this.source.listen((m) => m.isDragging());
    }
    get data() {
        return this.context.data;
    }
    /** @ignore */
    get type() {
        return this.context.spec && this.context.spec.type;
    }
    /** @ignore */
    get accepts() {
        const spec = this.context.spec;
        if (!spec)
            return [];
        if (Array.isArray(spec.accepts)) {
            return spec.accepts;
        }
        else {
            return spec.accepts || spec.type;
        }
    }
    /** @ignore */
    get listId() {
        return this.context.listId;
    }
    /** @ignore */
    get index() {
        return this.context.index;
    }
    /** @ignore */
    get spec() {
        return this.context.spec;
    }
    /** @ignore */
    createItem() {
        return {
            data: this.data,
            index: this.index,
            size: this.size(),
            type: this.type,
            isInternal: true,
            listId: this.listId,
            hover: {
                index: this.index,
                listId: this.listId,
            },
        };
    }
    /** @ignore */
    getCanDrag(monitor) {
        if (this.spec && this.spec.canDrag) {
            return this.spec.canDrag(this.data, this.listId, monitor);
        }
        return true;
    }
    /** @ignore */
    isDragging(item) {
        if (this.spec && this.spec.isDragging) {
            return (item && this.spec.isDragging(this.data, item)) || false;
        }
        else {
            return (item && this.sameIds(this.data, item)) || false;
        }
    }
    /** @ignore */
    hover(monitor) {
        const item = monitor.getItem();
        const clientOffset = monitor.getClientOffset();
        if (item == null || clientOffset == null) {
            return;
        }
        // hovering on yourself should do nothing
        if (this.isDragging(item) &&
            this.index === item.hover.index &&
            this.listId === item.hover.listId) {
            return;
        }
        const { hover } = item;
        let suggester = getSuggester(this.context.hoverTrigger);
        let suggestedIndex = suggester(this.context, item, this.rect(), clientOffset);
        // happens if you aren't implementing SortableSpec correctly.
        if (suggestedIndex < 0) {
            // console.warn('this.listId',this.listId, 'hover.listId', hover.listId)
            // suggestedIndex = 0;
            throw new Error('@rednax/sortable: Cannot move a card to an index < 0.');
        }
        // move the item if its new position is different
        if (suggestedIndex !== hover.index || this.listId !== hover.listId) {
            item.hover = {
                index: suggestedIndex,
                listId: this.listId,
            };
            if (this.spec &&
                this.spec.canDrop &&
                !this.spec.canDrop(item, monitor)) {
                return;
            }
            // shallow clone so library consumers don't mutate our items
            this.spec &&
                this.spec.hover &&
                this.spec.hover(Object.assign({}, item), monitor);
        }
    }
    /** @ignore */
    rect() {
        if (!this.el) {
            throw new Error('@rednax/sortable: [ssRender] expected to be attached to a real DOM element');
        }
        const rect = this.el.nativeElement.getBoundingClientRect();
        return rect;
    }
    /** @ignore */
    size() {
        const rect = this.rect();
        const width = rect.width || rect.right - rect.left;
        const height = rect.height || rect.bottom - rect.top;
        return new Size(width, height);
    }
    /** @ignore */
    ngOnInit() {
        this.target.setTypes(this.accepts);
        this.source.setType(this.type);
    }
    /** @ignore */
    ngAfterViewInit() {
        if (this.el) {
            this.target.connectDropTarget(this.el.nativeElement);
        }
    }
    /** @ignore */
    ngOnChanges() {
        this.target.setTypes(this.accepts);
        this.source.setType(this.type);
    }
    /** @ignore */
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
}
SkyhookSortableRenderer.ɵfac = function SkyhookSortableRenderer_Factory(t) { return new (t || SkyhookSortableRenderer)(i0.ɵɵdirectiveInject(i1.SkyhookDndService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
SkyhookSortableRenderer.ɵdir = i0.ɵɵdefineDirective({ type: SkyhookSortableRenderer, selectors: [["", "ssRender", ""]], inputs: { context: ["ssRender", "context"] }, exportAs: ["ssRender"], features: [i0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(SkyhookSortableRenderer, [{
        type: Directive,
        args: [{
                selector: '[ssRender]',
                exportAs: 'ssRender',
            }]
    }], function () { return [{ type: i1.SkyhookDndService }, { type: i0.ElementRef }]; }, { context: [{
            type: Input,
            args: ['ssRender']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvc29ydGFibGUvc3JjL2xpYi9kaXJlY3RpdmVzL3JlbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQ0gsaUJBQWlCLEdBS3BCLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLE9BQU8sRUFBZSxJQUFJLEVBQWlCLE1BQU0sVUFBVSxDQUFDO0FBQzVELE9BQU8sRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFFaEQsY0FBYztBQUNkLE1BQU0sMEJBQTBCLEdBQzVCLHFCQUFxQjtJQUNyQiwyQkFBMkI7SUFDM0IsQ0FBQyxDQUFDLENBQWEsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBTTFDLE1BQU0sT0FBTyx1QkFBdUI7SUF1RGhDLGNBQWM7SUFDZCxZQUNZLEdBQXNCLEVBQ3RCLEVBQTJCO1FBRDNCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3RCLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBeEJ2QyxjQUFjO1FBQ04sU0FBSSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFnR2xDLGNBQWM7UUFDTixZQUFPLEdBQUcsQ0FBQyxJQUFVLEVBQUUsS0FBd0IsRUFBRSxFQUFFO1lBQ3ZELE9BQU8sQ0FDSCxJQUFJO2dCQUNKLEtBQUssQ0FBQyxJQUFJO2dCQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FD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RUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsY0FBYztJQUNkLFFBQVE7UUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxjQUFjO0lBQ2QsZUFBZTtRQUNYLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNULElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN4RDtJQUNMLENBQUM7SUFFRCxjQUFjO0lBQ2QsV0FBVztRQUNQLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGNBQWM7SUFDZCxXQUFXO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs4RkFoUVEsdUJBQXVCOzREQUF2Qix1QkFBdUI7a0RBQXZCLHVCQUF1QjtjQUpuQyxTQUFTO2VBQUM7Z0JBQ1AsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFFBQVEsRUFBRSxVQUFVO2FBQ3ZCOzZGQUVzQixPQUFPO2tCQUF6QixLQUFLO21CQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBTa3lob29rRG5kU2VydmljZSxcbiAgICBEcmFnU291cmNlLFxuICAgIERyb3BUYXJnZXQsXG4gICAgRHJhZ1NvdXJjZU1vbml0b3IsXG4gICAgRHJvcFRhcmdldE1vbml0b3IsXG59IGZyb20gJ0ByZWRuYXgvY29yZSc7XG5pbXBvcnQgeyBEcmFnZ2VkSXRlbSwgU2l6ZSwgUmVuZGVyQ29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZ2V0U3VnZ2VzdGVyIH0gZnJvbSAnLi4vaG92ZXJUcmlnZ2Vycyc7XG5cbi8qKiBAaWdub3JlICovXG5jb25zdCBfc2NoZWR1bGVNaWNyb1Rhc2tQb2x5ZmlsbDogKGY6ICgpID0+IHZvaWQpID0+IGFueSA9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgKChmOiAoKSA9PiB2b2lkKSA9PiBzZXRUaW1lb3V0KGYsIDApKTtcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbc3NSZW5kZXJdJyxcbiAgICBleHBvcnRBczogJ3NzUmVuZGVyJyxcbn0pXG5leHBvcnQgY2xhc3MgU2t5aG9va1NvcnRhYmxlUmVuZGVyZXI8RGF0YT4gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgQElucHV0KCdzc1JlbmRlcicpIGNvbnRleHQhOiBSZW5kZXJDb250ZXh0PERhdGE+O1xuXG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuZGF0YTtcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBwcml2YXRlIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnNwZWMgJiYgdGhpcy5jb250ZXh0LnNwZWMudHlwZTtcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBwcml2YXRlIGdldCBhY2NlcHRzKCkge1xuICAgICAgICBjb25zdCBzcGVjID0gdGhpcy5jb250ZXh0LnNwZWM7XG4gICAgICAgIGlmICghc3BlYykgcmV0dXJuIFtdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzcGVjLmFjY2VwdHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3BlYy5hY2NlcHRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNwZWMuYWNjZXB0cyB8fCBzcGVjLnR5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBwcml2YXRlIGdldCBsaXN0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQubGlzdElkO1xuICAgIH1cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIHByaXZhdGUgZ2V0IGluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmluZGV4O1xuICAgIH1cblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgcHJpdmF0ZSBnZXQgc3BlYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5zcGVjO1xuICAgIH1cblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgcHJpdmF0ZSBzdWJzID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gICAgLyoqIFRoaXMgRHJvcFRhcmdldCBpcyBhdHRhY2hlZCB3aGVyZSBbc3NSZW5kZXJdIGlzLlxuICAgICAqXG4gICAgICogSXQgaXMgcmVzcG9uc2libGUgZm9yIHRyaWdnZXJpbmcge0BsaW5rIFNvcnRhYmxlU3BlYy5ob3Zlcn0gd2hlbiB0aGUgcGxhY2UgeW91IGFyZSBob3ZlcmluZyBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHRhcmdldDogRHJvcFRhcmdldDxEcmFnZ2VkSXRlbTxEYXRhPj47XG5cbiAgICAvKiogVGhpcyBEcmFnU291cmNlIGlzIE5PVCBhdHRhY2hlZCBmb3IgeW91LlxuICAgICAqXG4gICAgICogIFlvdSBuZWVkIHRvIGF0dGFjaCBpdCB5b3Vyc2VsZiwgYnkgcHVsbGluZyAjcmVuZGVyPVwic3NSZW5kZXJcIiwgYW5kIGFwcGx5aW5nIFtkcmFnU291cmNlXT1cInJlbmRlci5zb3VyY2VcIi5cbiAgICAgKi9cbiAgICBzb3VyY2U6IERyYWdTb3VyY2U8RHJhZ2dlZEl0ZW08RGF0YT4+O1xuXG4gICAgLyoqXG4gICAgICogU2hvcnRjdXQgZm9yIGB0aGlzLnNvdXJjZS5saXN0ZW4obSA9PiBtLmlzRHJhZ2dpbmcoKSlgXG4gICAgICpcbiAgICAgKi9cbiAgICBpc0RyYWdnaW5nJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZG5kOiBTa3lob29rRG5kU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD5cbiAgICApIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLmRuZC5kcm9wVGFyZ2V0PERyYWdnZWRJdGVtPERhdGE+PihcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhIGhvdmVyLW9ubHkgc2l0dWF0aW9uXG4gICAgICAgICAgICAgICAgY2FuRHJvcDogKCkgPT4gZmFsc2UsXG4gICAgICAgICAgICAgICAgaG92ZXI6IChtb25pdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXIobW9uaXRvcik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLnN1YnNcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnNvdXJjZSA9IHRoaXMuZG5kLmRyYWdTb3VyY2U8RHJhZ2dlZEl0ZW08RGF0YT4+KFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjYW5EcmFnOiAobW9uaXRvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDYW5EcmFnKG1vbml0b3IpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaXNEcmFnZ2luZzogKG1vbml0b3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNEcmFnZ2luZyhtb25pdG9yLmdldEl0ZW0oKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWdpbkRyYWc6IChtb25pdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNyZWF0ZUl0ZW0oKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWl1bSBidWcgc2luY2UgMjAxNjogaWYgeW91IG1vZGlmeSBzdHlsZXMgb3IgRE9NXG4gICAgICAgICAgICAgICAgICAgIC8vIHN5bmNocm9ub3VzbHkgd2l0aGluICdkcmFnc3RhcnQnIGhhbmRsZXIsIENocm9tZSBmaXJlc1xuICAgICAgICAgICAgICAgICAgICAvLyBhICdkcmFnZW5kJyBpbW1lZGlhdGVseS5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Njc0ODgyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsdGhvdWdoIHJlY29tbWVuZGVkIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKSBkb2Vzbid0IHdvcmsuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlYyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGVjLmJlZ2luRHJhZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgX3NjaGVkdWxlTWljcm9UYXNrUG9seWZpbGwoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlYyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwZWMuYmVnaW5EcmFnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlYy5iZWdpbkRyYWcoaXRlbSwgbW9uaXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVuZERyYWc6IChtb25pdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBtb25pdG9yLmdldEl0ZW0oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlYyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlYy5lbmREcmFnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGVjLmVuZERyYWcoaXRlbSwgbW9uaXRvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoaXMuc3Vic1xuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyQgPSB0aGlzLnNvdXJjZS5saXN0ZW4oKG0pID0+IG0uaXNEcmFnZ2luZygpKTtcbiAgICB9XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIHByaXZhdGUgY3JlYXRlSXRlbSgpOiBEcmFnZ2VkSXRlbTxEYXRhPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgIHNpemU6IHRoaXMuc2l6ZSgpLFxuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgaXNJbnRlcm5hbDogdHJ1ZSxcbiAgICAgICAgICAgIGxpc3RJZDogdGhpcy5saXN0SWQsXG4gICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgICAgIGxpc3RJZDogdGhpcy5saXN0SWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgcHJpdmF0ZSBzYW1lSWRzID0gKGRhdGE6IERhdGEsIG90aGVyOiBEcmFnZ2VkSXRlbTxEYXRhPikgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZGF0YSAmJlxuICAgICAgICAgICAgb3RoZXIuZGF0YSAmJlxuICAgICAgICAgICAgdGhpcy5zcGVjLnRyYWNrQnkoZGF0YSkgPT09IHRoaXMuc3BlYy50cmFja0J5KG90aGVyLmRhdGEpXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgcHJpdmF0ZSBnZXRDYW5EcmFnKG1vbml0b3I6IERyYWdTb3VyY2VNb25pdG9yPHZvaWQsIHZvaWQ+KSB7XG4gICAgICAgIGlmICh0aGlzLnNwZWMgJiYgdGhpcy5zcGVjLmNhbkRyYWcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNwZWMuY2FuRHJhZyh0aGlzLmRhdGEsIHRoaXMubGlzdElkLCBtb25pdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIHByaXZhdGUgaXNEcmFnZ2luZyhpdGVtOiBEcmFnZ2VkSXRlbTxEYXRhPiB8IG51bGwpIHtcbiAgICAgICAgaWYgKHRoaXMuc3BlYyAmJiB0aGlzLnNwZWMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtICYmIHRoaXMuc3BlYy5pc0RyYWdnaW5nKHRoaXMuZGF0YSwgaXRlbSkpIHx8IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtICYmIHRoaXMuc2FtZUlkcyh0aGlzLmRhdGEsIGl0ZW0pKSB8fCBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgcHJpdmF0ZSBob3Zlcihtb25pdG9yOiBEcm9wVGFyZ2V0TW9uaXRvcjxEcmFnZ2VkSXRlbTxEYXRhPj4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IG1vbml0b3IuZ2V0SXRlbSgpO1xuICAgICAgICBjb25zdCBjbGllbnRPZmZzZXQgPSBtb25pdG9yLmdldENsaWVudE9mZnNldCgpO1xuICAgICAgICBpZiAoaXRlbSA9PSBudWxsIHx8IGNsaWVudE9mZnNldCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaG92ZXJpbmcgb24geW91cnNlbGYgc2hvdWxkIGRvIG5vdGhpbmdcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nKGl0ZW0pICYmXG4gICAgICAgICAgICB0aGlzLmluZGV4ID09PSBpdGVtLmhvdmVyLmluZGV4ICYmXG4gICAgICAgICAgICB0aGlzLmxpc3RJZCA9PT0gaXRlbS5ob3Zlci5saXN0SWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBob3ZlciB9ID0gaXRlbTtcbiAgICAgICAgbGV0IHN1Z2dlc3RlciA9IGdldFN1Z2dlc3Rlcih0aGlzLmNvbnRleHQuaG92ZXJUcmlnZ2VyKTtcbiAgICAgICAgbGV0IHN1Z2dlc3RlZEluZGV4ID0gc3VnZ2VzdGVyKFxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgIHRoaXMucmVjdCgpLFxuICAgICAgICAgICAgY2xpZW50T2Zmc2V0XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gaGFwcGVucyBpZiB5b3UgYXJlbid0IGltcGxlbWVudGluZyBTb3J0YWJsZVNwZWMgY29ycmVjdGx5LlxuICAgICAgICBpZiAoc3VnZ2VzdGVkSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ3RoaXMubGlzdElkJyx0aGlzLmxpc3RJZCwgJ2hvdmVyLmxpc3RJZCcsIGhvdmVyLmxpc3RJZClcbiAgICAgICAgICAgIC8vIHN1Z2dlc3RlZEluZGV4ID0gMDtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnQHJlZG5heC9zb3J0YWJsZTogQ2Fubm90IG1vdmUgYSBjYXJkIHRvIGFuIGluZGV4IDwgMC4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW92ZSB0aGUgaXRlbSBpZiBpdHMgbmV3IHBvc2l0aW9uIGlzIGRpZmZlcmVudFxuICAgICAgICBpZiAoc3VnZ2VzdGVkSW5kZXggIT09IGhvdmVyLmluZGV4IHx8IHRoaXMubGlzdElkICE9PSBob3Zlci5saXN0SWQpIHtcbiAgICAgICAgICAgIGl0ZW0uaG92ZXIgPSB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHN1Z2dlc3RlZEluZGV4LFxuICAgICAgICAgICAgICAgIGxpc3RJZDogdGhpcy5saXN0SWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMuc3BlYyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc3BlYy5jYW5Ecm9wICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuc3BlYy5jYW5Ecm9wKGl0ZW0sIG1vbml0b3IpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzaGFsbG93IGNsb25lIHNvIGxpYnJhcnkgY29uc3VtZXJzIGRvbid0IG11dGF0ZSBvdXIgaXRlbXNcbiAgICAgICAgICAgIHRoaXMuc3BlYyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc3BlYy5ob3ZlciAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc3BlYy5ob3ZlcihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbW9uaXRvclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIHByaXZhdGUgcmVjdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ0ByZWRuYXgvc29ydGFibGU6IFtzc1JlbmRlcl0gZXhwZWN0ZWQgdG8gYmUgYXR0YWNoZWQgdG8gYSByZWFsIERPTSBlbGVtZW50J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWN0ID0gKHRoaXMuZWwubmF0aXZlRWxlbWVudCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgfVxuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBwcml2YXRlIHNpemUoKSB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLnJlY3QoKTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSByZWN0LndpZHRoIHx8IHJlY3QucmlnaHQgLSByZWN0LmxlZnQ7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHJlY3QuaGVpZ2h0IHx8IHJlY3QuYm90dG9tIC0gcmVjdC50b3A7XG4gICAgICAgIHJldHVybiBuZXcgU2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnRhcmdldC5zZXRUeXBlcyh0aGlzLmFjY2VwdHMpO1xuICAgICAgICB0aGlzLnNvdXJjZS5zZXRUeXBlKHRoaXMudHlwZSk7XG4gICAgfVxuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmVsKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5jb25uZWN0RHJvcFRhcmdldCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBuZ09uQ2hhbmdlcygpIHtcbiAgICAgICAgdGhpcy50YXJnZXQuc2V0VHlwZXModGhpcy5hY2NlcHRzKTtcbiAgICAgICAgdGhpcy5zb3VyY2Uuc2V0VHlwZSh0aGlzLnR5cGUpO1xuICAgIH1cblxuICAgIC8qKiBAaWdub3JlICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3Vicy51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbiJdfQ==