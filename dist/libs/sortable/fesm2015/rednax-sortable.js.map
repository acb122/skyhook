{"version":3,"file":"rednax-sortable.js","sources":["../../../../libs/sortable/src/lib/types.ts","../../../../libs/sortable/src/lib/isEmpty.ts","../../../../libs/sortable/src/lib/directives/sortable.directive.ts","../../../../libs/sortable/src/lib/directives/template.directive.ts","../../../../libs/sortable/src/lib/directives/list.component.ts","../../../../libs/sortable/src/lib/hoverTriggers.ts","../../../../libs/sortable/src/lib/directives/render.directive.ts","../../../../libs/sortable/src/lib/directives/external.directive.ts","../../../../libs/sortable/src/lib/ngrx-helpers.ts","../../../../libs/sortable/src/lib/spillTarget.ts","../../../../libs/sortable/src/lib/module.ts","../../../../libs/sortable/rednax-sortable.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { DropTargetMonitor, DragSourceMonitor } from '@rednax/core';\n\nexport interface SortableSpec<Data, Type = string | symbol> {\n    /** The underlying @rednax/core / dnd-core type.\n     * String or symbol, if that's not clear from the documentation output.. */\n    type: Type;\n\n    /** By default, a sortable accepts the type it produces. But you could have\n     * it accept more types. Be sure to include `type` if you want to sort a\n     * list within itself.\n     *\n     * This opens up other possibilities: if you set `type` to `\"A\"` but\n     * `accepts` to `\"B\"`, you could allow dragging `\"B\"`s into it but not\n     * sorting within the list. */\n    accepts?: string | symbol | (string | symbol)[];\n\n    /** Used for external data sources only.\n     *\n     * Must produce a new object, with some Data which will be unique for the given trackBy function. */\n    createData?(): Data;\n\n    /** Required. Must produce a different value for every available Data.\n     *  Usually, this will be `data => data.id`. */\n    trackBy(data: Data): any;\n\n    /** Optional if you provided `[ssSortableChildren],` otherwise required.\n     *  NOTE: return an Observable! If you don't have one already, use `[ssSortableChildren]`.\n     *  A typical use is with an @ngrx/store: `getList: _listId => this.store.select(...)` */\n    getList?(listId: any): Observable<Iterable<Data>>;\n\n    /** Optional; some implementations do not need beginDrag. */\n    beginDrag?(\n        item: DraggedItem<Data>,\n        monitor: DragSourceMonitor<void, void>\n    ): void;\n\n    /** Required.\n     *\n     * After `hover`, the element you picked up (= *transit*) must be:\n     *\n     * 1. under the mouse; and\n     * 2. at the index `item.hover.index` in the list identified by\n     *    `item.hover.listId`\n     */\n    hover(\n        item: DraggedItem<Data>,\n        monitor: DropTargetMonitor<DraggedItem<Data>>\n    ): void;\n\n    /** Required; because if you don't have a drop function, what are you even doing? */\n    drop(\n        item: DraggedItem<Data>,\n        monitor: DropTargetMonitor<DraggedItem<Data>>\n    ): void;\n\n    /** Required; you must reset and remove any temporarily added data from the drag. */\n    endDrag(\n        item: DraggedItem<Data>,\n        monitor: DragSourceMonitor<DraggedItem<Data>>\n    ): void;\n\n    /** Optional; you may override the default 'same trackBy' implementation.\n     *\n     * isDragging determines which card on the ground will regard itself as\n     * \"the same as the one in flight\". It must return true for exactly one\n     * card at a time, and that card MUST be placed under the most recently\n     * hovered DraggedItem.\n     *\n     * If it is not implemented correctly, then each card will not be able to\n     * determine whether it is under the mouse (and therefore should not emit\n     * hover events); you will get a deluge of incorrect hover events.\n     *\n     * By default, it is defined as:\n\n```typescript\ntrackBy(ground) === trackBy(inFlight.data)\n```\n\n     * If you want to be able to copy cards around, and there's an extra clone\n     * in transit around the board, you have to be careful to implement\n     * isDragging correctly, or ensure that any clones have a different\n     * `trackBy()` result. Note, however, that the item in `beginDrag` is the\n     * original, so simply giving clones a different `id` is not typically\n     * enough; the clone will not respond to `isDragging`, the original will\n     * (and you want to move the clone).\n     *\n     * Therefore, one solution is as follows:\n     *\n```typescript\nisDragging: (ground, inFlight) => {\n    let flyingId = this.isCopying ? CARD_ID_WHEN_COPYING : inFlight.data.id;\n    return ground.id === flyingId;\n}\n```\n     *\n     */\n    isDragging?(ground: Data, inFlight: DraggedItem<Data>): boolean;\n\n    /** Optional; you may override default `() => true`.\n     *\n     *  When used with the `[ssExternal]` directive, the first two arguments will be undefined,\n     *  because the data has not yet been created and external items are not associated with a list.\n     *  You should be able to decide `canDrag` without these.\n     */\n    canDrag?(\n        data: Data,\n        listId: any,\n        monitor: DragSourceMonitor<void, void>\n    ): boolean;\n\n    /** Optional; you may override default `() => true`.\n     *  Inspect `item.hover` for where it is hovering. */\n    canDrop?(\n        item: DraggedItem<Data>,\n        monitor: DropTargetMonitor<DraggedItem<Data>>\n    ): boolean;\n}\n\nexport class Size {\n    constructor(public width: number, public height: number) {}\n    style() {\n        return {\n            width: this.width + 'px',\n            height: this.height + 'px',\n        };\n    }\n}\n\nexport interface DraggedItem<Data> {\n    data: Data;\n    size: Size;\n    type: string | symbol;\n    index: number;\n    listId: any;\n    isInternal?: boolean;\n    // isCopy?: boolean;\n    hover: {\n        index: number;\n        listId: any;\n    };\n}\n\nexport enum HoverTrigger {\n    halfway = 'halfway',\n    fixed = 'fixed',\n}\n\nexport interface RenderContext<Data> {\n    data: Data;\n    index: number;\n    horizontal: boolean;\n    hoverTrigger: HoverTrigger;\n    listId: number;\n    spec: SortableSpec<Data>;\n}\n","/** @ignore\n * Returns isEmpty, whether it's an immutable List or an array\n */\nexport function isEmpty(list: Iterable<any>): boolean {\n    for (let _ of list) {\n        return false;\n    }\n    return true;\n}\n\n","import {\n    Input,\n    Directive,\n    OnInit,\n    OnChanges,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from '@angular/core';\n// @ts-ignore\nimport { Subscription, Observable, BehaviorSubject } from 'rxjs';\nimport { DropTarget, SkyhookDndService, DropTargetMonitor } from '@rednax/core';\nimport {\n    SortableSpec,\n    DraggedItem,\n    RenderContext,\n    HoverTrigger,\n} from '../types';\nimport { isEmpty } from '../isEmpty';\n\n@Directive({\n    selector: '[ssSortable]',\n    exportAs: 'ssSortable',\n})\nexport class SkyhookSortable<Data>\n    implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n    @Input('ssSortableListId') listId: any = Math.random().toString();\n    @Input('ssSortableHorizontal') horizontal = false;\n    @Input('ssSortableSpec') protected spec!: SortableSpec<Data>;\n    @Input('ssSortableChildren') children?: Iterable<Data>;\n    /** Possible values:\n     *\n     * - 'halfway' (default): triggers a reorder when you drag halfway over a neighbour\n     * - 'fixed': triggers as soon as you move over a neighbouring element. Does not work with variable size elements. */\n    @Input('ssSortableTrigger') hoverTrigger = HoverTrigger.halfway;\n\n    /** @ignore */\n    private childrenSubject$ = new BehaviorSubject<Iterable<Data>>([]);\n    /**\n     * A handy way to subscribe to spec.getList().\n     */\n    public children$: Observable<Iterable<Data>> = this.childrenSubject$;\n\n    /** @ignore */\n    subs = new Subscription();\n    /** @ignore */\n    listSubs = new Subscription();\n\n    /** This DropTarget is attached to the whole list.\n     *\n     * You may monitor it for information like 'is an item hovering over this entire list somewhere?'\n     */\n    target: DropTarget<DraggedItem<Data>>;\n\n    /** @ignore */\n    constructor(\n        protected dnd: SkyhookDndService,\n        protected el: ElementRef<HTMLElement>,\n        protected cdr: ChangeDetectorRef\n    ) {\n        this.target = this.dnd.dropTarget<DraggedItem<Data>>(\n            null,\n            {\n                canDrop: (monitor) => {\n                    if (!this.acceptsType(monitor.getItemType())) {\n                        return false;\n                    }\n                    const item = monitor.getItem();\n                    if (!item) {\n                        return false;\n                    }\n                    return this.getCanDrop(item, monitor);\n                },\n                drop: (monitor) => {\n                    const item = monitor.getItem();\n                    if (item && this.getCanDrop(item, monitor)) {\n                        this.spec &&\n                            this.spec.drop &&\n                            this.spec.drop(item, monitor);\n                    }\n                    return {};\n                },\n                hover: (monitor) => {\n                    const item = monitor.getItem();\n                    if (this.children && isEmpty(this.children) && item) {\n                        const canDrop = this.getCanDrop(item, monitor);\n                        if (canDrop && monitor.isOver({ shallow: true })) {\n                            this.callHover(item, monitor, {\n                                listId: this.listId,\n                                index: 0,\n                            });\n                        }\n                    }\n                },\n            },\n            this.subs\n        );\n    }\n\n    /** @ignore */\n    private updateSubscription() {\n        const anyListId =\n            typeof this.listId !== 'undefined' && this.listId !== null;\n        if (anyListId && this.spec) {\n            if (this.listSubs) {\n                this.subs.remove(this.listSubs);\n                this.listSubs.unsubscribe();\n            }\n\n            if (this.spec.getList) {\n                const cs$ = this.spec.getList(this.listId);\n                this.listSubs =\n                    cs$ &&\n                    cs$.subscribe((l) => {\n                        if (l) {\n                            this.childrenSubject$.next(l);\n                            this.children = l;\n                            this.cdr.markForCheck();\n                        }\n                    });\n\n                this.subs.add(this.listSubs);\n            }\n        }\n    }\n\n    public contextFor(data: Data, index: number): RenderContext<Data> {\n        return {\n            data,\n            index,\n            listId: this.listId,\n            spec: this.spec,\n            horizontal: this.horizontal,\n            hoverTrigger: this.hoverTrigger,\n        };\n    }\n\n    /** @ignore */\n    private getCanDrop(\n        item: DraggedItem<Data>,\n        monitor: DropTargetMonitor<DraggedItem<Data>>,\n        _default = true\n    ) {\n        if (this.spec && this.spec.canDrop) {\n            return this.spec.canDrop(item, monitor);\n        }\n        return _default;\n    }\n\n    /** @ignore */\n    private callHover(\n        item: DraggedItem<Data>,\n        monitor: DropTargetMonitor<DraggedItem<Data>>,\n        newHover?: { listId: any; index: number }\n    ) {\n        if (newHover) {\n            // mutate the object\n            item.hover = newHover;\n            // but also shallow clone so distinct from previous,\n            // useful if you rely on that for ngrx\n            item = { ...item };\n        }\n        this.spec && this.spec.hover && this.spec.hover(item, monitor);\n    }\n\n    /** @ignore */\n    ngOnInit() {\n        this.updateSubscription();\n        this.target.setTypes(this.getTargetType());\n    }\n\n    getTargetType() {\n        if (Array.isArray(this.spec.accepts)) {\n            return this.spec.accepts;\n        } else {\n            return this.spec.accepts || this.spec.type;\n        }\n    }\n\n    acceptsType(ty: string | symbol | null) {\n        if (ty == null) return false;\n        if (Array.isArray(this.spec.accepts)) {\n            const arr = this.spec.accepts as Array<string | symbol>;\n            return arr.indexOf(ty) !== -1;\n        } else {\n            let acc = this.getTargetType();\n            return ty == acc;\n        }\n    }\n\n    /** @ignore */\n    ngOnChanges({ spec, listId }: SimpleChanges) {\n        if (listId) {\n            this.updateSubscription();\n        }\n        if (spec) {\n            this.updateSubscription();\n        }\n        this.target.setTypes(this.getTargetType());\n    }\n\n    /** @ignore */\n    ngAfterViewInit() {\n        if (this.el) {\n            this.target.connectDropTarget(this.el.nativeElement);\n        } else {\n            throw new Error('ssSortable directive must have ElementRef');\n        }\n    }\n\n    /** @ignore */\n    ngOnDestroy() {\n        this.subs.unsubscribe();\n    }\n}\n","import { Directive } from \"@angular/core\";\nimport { RenderContext } from \"../types\";\n\nexport interface TemplateContext<Data> {\n    $implicit: RenderContext<Data>\n}\n\n@Directive({\n    selector: '[ssTemplate]'\n})\nexport class SkyhookSortableTemplate {\n}\n","import {\n    Component,\n    Input,\n    TemplateRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    OnDestroy,\n    OnChanges,\n    AfterViewInit,\n    AfterContentInit,\n    ElementRef,\n    QueryList,\n    SimpleChanges,\n    ContentChildren,\n} from '@angular/core';\nimport { SkyhookDndService } from '@rednax/core';\n// @ts-ignore\nimport { Observable, Subscription } from 'rxjs';\nimport { SkyhookSortableTemplate, TemplateContext } from './template.directive';\nimport { SkyhookSortable } from './sortable.directive';\n\n@Component({\n    selector: 'skyhook-sortable-list',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <ng-container\n            *ngFor=\"let card of children; let i = index; trackBy: trackById\"\n        >\n            <ng-container\n                *ngTemplateOutlet=\"\n                    template;\n                    context: {\n                        $implicit: contextFor(card, i)\n                    }\n                \"\n            >\n            </ng-container>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n    // allow injecting the directive and getting the component\n    providers: [\n        {\n            provide: SkyhookSortable,\n            useExisting: SkyhookSortableList,\n        },\n    ],\n})\nexport class SkyhookSortableList<Data> extends SkyhookSortable<Data>\n    implements OnDestroy, OnChanges, AfterContentInit, AfterViewInit {\n    @Input('ssTemplate') template?: TemplateRef<TemplateContext<Data>>;\n\n    /** @ignore */\n    @ContentChildren(SkyhookSortableTemplate, {\n        read: TemplateRef,\n    })\n    set ssRenderTemplates(ql: QueryList<TemplateRef<TemplateContext<Data>>>) {\n        if (ql.length > 0) {\n            this.template = ql.first;\n        }\n    }\n\n    /** @ignore */\n    constructor(\n        dnd: SkyhookDndService,\n        el: ElementRef<HTMLElement>,\n        cdr: ChangeDetectorRef\n    ) {\n        super(dnd, el, cdr);\n    }\n\n    /** @ignore */\n    trackById = (_: number, data: Data) => {\n        return this.spec && this.spec.trackBy(data);\n    };\n\n    /** @ignore */\n    ngAfterContentInit() {\n        if (!this.template) {\n            throw new Error(\n                'You must provide a <ng-template cardTemplate> as a content child, or with [template]=\"myTemplateRef\"'\n            );\n        }\n    }\n\n    // forwarding lifecycle events is required until Ivy renderer\n\n    /** @ignore */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /** @ignore */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n    }\n\n    /** @ignore */\n    ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n    }\n\n    /** @ignore */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\n","import { HoverTrigger } from './types';\nimport { Offset } from '@rednax/core';\nimport { RenderContext, DraggedItem } from './types';\n\n//     ~ List ~\n// [\n//   [ index 0 ]\n//   [ index 1 ] <-- index 1 gets picked up\n//   [ index 2 ]\n// ]\n//\n// We want to emit a hover when:\n//   - the mouse moves over the top half of 0\n//   - the mouse moves over the bottom half of 2\n//\n// ,----------------------,\n// | target 0 top half    | => emits 0\n// |----------------------|\n// | target 0 bottom half | => computes 1, doesn't emit\n// '----------------------'\n// ,----------------------,\n// | target 1 (inert)     | => computes 1, doesn't emit\n// '----------------------'\n// ,----------------------,\n// | target 2 top half    | => computes 1, doesn't emit\n// |----------------------|\n// | target 2 bottom half | => emits 2\n// '----------------------'\n//\n\nexport function suggestHalfway<Data>(\n    ctx: RenderContext<Data>,\n    item: DraggedItem<Data>,\n    rect: DOMRect | ClientRect,\n    clientOffset: Offset\n) {\n    const { hover } = item;\n    const dim = ctx.horizontal\n        ? rect.width || rect.right - rect.left\n        : rect.height || rect.bottom - rect.top;\n    const start = ctx.horizontal ? rect.left : rect.top;\n    const targetCentre = start + dim / 2.0;\n    const mouse = ctx.horizontal ? clientOffset.x : clientOffset.y;\n    const topHalf = mouse < targetCentre;\n    let suggestedIndex: number;\n    if (ctx.listId === hover.listId) {\n        if (ctx.index < hover.index) {\n            suggestedIndex = topHalf ? ctx.index : ctx.index + 1;\n        } else {\n            suggestedIndex = topHalf ? ctx.index - 1 : ctx.index;\n        }\n    } else {\n        // first hover on a different list;\n        // there is no relevant hover.index to compare to\n        suggestedIndex = topHalf ? ctx.index : ctx.index + 1;\n    }\n    return suggestedIndex;\n}\n\nexport function suggestFixed<Data>(ctx: RenderContext<Data>) {\n    return ctx.index;\n}\n\nexport function getSuggester(trigger: HoverTrigger) {\n    switch (trigger) {\n        case HoverTrigger.fixed:\n            return suggestFixed;\n        default:\n            return suggestHalfway;\n    }\n}\n","import { Directive, Input, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport {\n    SkyhookDndService,\n    DragSource,\n    DropTarget,\n    DragSourceMonitor,\n    DropTargetMonitor,\n} from '@rednax/core';\nimport { DraggedItem, Size, RenderContext } from '../types';\nimport { Observable, Subscription } from 'rxjs';\nimport { getSuggester } from '../hoverTriggers';\n\n/** @ignore */\nconst _scheduleMicroTaskPolyfill: (f: () => void) => any =\n    requestAnimationFrame ||\n    webkitRequestAnimationFrame ||\n    ((f: () => void) => setTimeout(f, 0));\n\n@Directive({\n    selector: '[ssRender]',\n    exportAs: 'ssRender',\n})\nexport class SkyhookSortableRenderer<Data> implements OnInit, OnDestroy {\n    @Input('ssRender') context!: RenderContext<Data>;\n\n    get data() {\n        return this.context.data;\n    }\n    /** @ignore */\n    private get type() {\n        return this.context.spec && this.context.spec.type;\n    }\n    /** @ignore */\n    private get accepts() {\n        const spec = this.context.spec;\n        if (!spec) return [];\n        if (Array.isArray(spec.accepts)) {\n            return spec.accepts;\n        } else {\n            return spec.accepts || spec.type;\n        }\n    }\n    /** @ignore */\n    private get listId() {\n        return this.context.listId;\n    }\n    /** @ignore */\n    private get index() {\n        return this.context.index;\n    }\n\n    /** @ignore */\n    private get spec() {\n        return this.context.spec;\n    }\n\n    /** @ignore */\n    private subs = new Subscription();\n\n    /** This DropTarget is attached where [ssRender] is.\n     *\n     * It is responsible for triggering {@link SortableSpec.hover} when the place you are hovering changes.\n     */\n    target: DropTarget<DraggedItem<Data>>;\n\n    /** This DragSource is NOT attached for you.\n     *\n     *  You need to attach it yourself, by pulling #render=\"ssRender\", and applying [dragSource]=\"render.source\".\n     */\n    source: DragSource<DraggedItem<Data>>;\n\n    /**\n     * Shortcut for `this.source.listen(m => m.isDragging())`\n     *\n     */\n    isDragging$: Observable<boolean>;\n\n    /** @ignore */\n    constructor(\n        private dnd: SkyhookDndService,\n        private el: ElementRef<HTMLElement>\n    ) {\n        this.target = this.dnd.dropTarget<DraggedItem<Data>>(\n            null,\n            {\n                // this is a hover-only situation\n                canDrop: () => false,\n                hover: (monitor) => {\n                    this.hover(monitor);\n                },\n            },\n            this.subs\n        );\n\n        this.source = this.dnd.dragSource<DraggedItem<Data>>(\n            null,\n            {\n                canDrag: (monitor) => {\n                    return this.getCanDrag(monitor);\n                },\n                isDragging: (monitor) => {\n                    return this.isDragging(monitor.getItem());\n                },\n                beginDrag: (monitor) => {\n                    const item = this.createItem();\n\n                    // Chromium bug since 2016: if you modify styles or DOM\n                    // synchronously within 'dragstart' handler, Chrome fires\n                    // a 'dragend' immediately.\n                    //\n                    // https://bugs.chromium.org/p/chromium/issues/detail?id=674882\n                    // although recommended Promise.resolve().then() doesn't work.\n                    this.spec &&\n                        this.spec.beginDrag &&\n                        _scheduleMicroTaskPolyfill(() => {\n                            this.spec &&\n                                this.spec.beginDrag &&\n                                this.spec.beginDrag(item, monitor);\n                        });\n\n                    return item;\n                },\n                endDrag: (monitor) => {\n                    const item = monitor.getItem();\n                    if (item) {\n                        this.spec &&\n                            this.spec.endDrag &&\n                            this.spec.endDrag(item, monitor);\n                    }\n                },\n            },\n            this.subs\n        );\n\n        this.isDragging$ = this.source.listen((m) => m.isDragging());\n    }\n\n    /** @ignore */\n    private createItem(): DraggedItem<Data> {\n        return {\n            data: this.data,\n            index: this.index,\n            size: this.size(),\n            type: this.type,\n            isInternal: true,\n            listId: this.listId,\n            hover: {\n                index: this.index,\n                listId: this.listId,\n            },\n        };\n    }\n\n    /** @ignore */\n    private sameIds = (data: Data, other: DraggedItem<Data>) => {\n        return (\n            data &&\n            other.data &&\n            this.spec.trackBy(data) === this.spec.trackBy(other.data)\n        );\n    };\n\n    /** @ignore */\n    private getCanDrag(monitor: DragSourceMonitor<void, void>) {\n        if (this.spec && this.spec.canDrag) {\n            return this.spec.canDrag(this.data, this.listId, monitor);\n        }\n        return true;\n    }\n\n    /** @ignore */\n    private isDragging(item: DraggedItem<Data> | null) {\n        if (this.spec && this.spec.isDragging) {\n            return (item && this.spec.isDragging(this.data, item)) || false;\n        } else {\n            return (item && this.sameIds(this.data, item)) || false;\n        }\n    }\n\n    /** @ignore */\n    private hover(monitor: DropTargetMonitor<DraggedItem<Data>>): void {\n        const item = monitor.getItem();\n        const clientOffset = monitor.getClientOffset();\n        if (item == null || clientOffset == null) {\n            return;\n        }\n        // hovering on yourself should do nothing\n        if (\n            this.isDragging(item) &&\n            this.index === item.hover.index &&\n            this.listId === item.hover.listId\n        ) {\n            return;\n        }\n        const { hover } = item;\n        let suggester = getSuggester(this.context.hoverTrigger);\n        let suggestedIndex = suggester(\n            this.context,\n            item,\n            this.rect(),\n            clientOffset\n        );\n\n        // happens if you aren't implementing SortableSpec correctly.\n        if (suggestedIndex < 0) {\n            // console.warn('this.listId',this.listId, 'hover.listId', hover.listId)\n            // suggestedIndex = 0;\n            throw new Error(\n                '@rednax/sortable: Cannot move a card to an index < 0.'\n            );\n        }\n\n        // move the item if its new position is different\n        if (suggestedIndex !== hover.index || this.listId !== hover.listId) {\n            item.hover = {\n                index: suggestedIndex,\n                listId: this.listId,\n            };\n            if (\n                this.spec &&\n                this.spec.canDrop &&\n                !this.spec.canDrop(item, monitor)\n            ) {\n                return;\n            }\n            // shallow clone so library consumers don't mutate our items\n            this.spec &&\n                this.spec.hover &&\n                this.spec.hover(\n                    {\n                        ...item,\n                    },\n                    monitor\n                );\n        }\n    }\n\n    /** @ignore */\n    private rect() {\n        if (!this.el) {\n            throw new Error(\n                '@rednax/sortable: [ssRender] expected to be attached to a real DOM element'\n            );\n        }\n        const rect = (this.el.nativeElement as Element).getBoundingClientRect();\n        return rect;\n    }\n\n    /** @ignore */\n    private size() {\n        const rect = this.rect();\n        const width = rect.width || rect.right - rect.left;\n        const height = rect.height || rect.bottom - rect.top;\n        return new Size(width, height);\n    }\n\n    /** @ignore */\n    ngOnInit() {\n        this.target.setTypes(this.accepts);\n        this.source.setType(this.type);\n    }\n\n    /** @ignore */\n    ngAfterViewInit() {\n        if (this.el) {\n            this.target.connectDropTarget(this.el.nativeElement);\n        }\n    }\n\n    /** @ignore */\n    ngOnChanges() {\n        this.target.setTypes(this.accepts);\n        this.source.setType(this.type);\n    }\n\n    /** @ignore */\n    ngOnDestroy() {\n        this.subs.unsubscribe();\n    }\n}\n","import {\n    Directive,\n    Input,\n    ElementRef,\n    OnChanges,\n    OnDestroy,\n} from '@angular/core';\nimport { SkyhookDndService, DragSource } from '@rednax/core';\nimport { DraggedItem, SortableSpec, Size } from '../types';\n// @ts-ignore\nimport { Observable, Subscription } from 'rxjs';\n\nexport const EXTERNAL_LIST_ID: symbol = Symbol('EXTERNAL_LIST_ID');\n\n@Directive({\n    selector: '[ssExternal]',\n    exportAs: 'ssExternal',\n})\nexport class SkyhookSortableExternal<Data> implements OnChanges, OnDestroy {\n    @Input('ssExternal') spec!: SortableSpec<Data>;\n\n    /** This source has beginDrag and endDrag implemented in line with what ssRender does.\n     *\n     * You must, like ssRender, attach it with [dragSource] somewhere.\n     */\n    public source: DragSource<DraggedItem<Data>>;\n\n    /** @ignore */\n    constructor(\n        private dnd: SkyhookDndService,\n        private el: ElementRef<Element>\n    ) {\n        this.source = this.dnd.dragSource<DraggedItem<Data>>(null, {\n            canDrag: (monitor) => {\n                if (this.spec && this.spec.canDrag) {\n                    // beginDrag has not been called yet, so there is no data, and this is not part of a list.\n                    // you should be able to decide canDrag without these anyway.\n                    return this.spec.canDrag(\n                        undefined as any,\n                        undefined,\n                        monitor\n                    );\n                }\n                return true;\n            },\n            beginDrag: () => {\n                if (typeof this.spec.createData !== 'function') {\n                    throw new Error('spec.createData must be a function');\n                }\n                return {\n                    type: this.spec.type,\n                    data: this.spec.createData(),\n                    hover: { index: -1, listId: EXTERNAL_LIST_ID },\n                    isInternal: false,\n                    index: -1,\n                    listId: EXTERNAL_LIST_ID,\n                    size: this.size(),\n                };\n            },\n            endDrag: (monitor) => {\n                const item = monitor.getItem();\n                if (item) {\n                    this.spec &&\n                        this.spec.endDrag &&\n                        this.spec.endDrag(item, monitor);\n                }\n            },\n        });\n    }\n\n    /** @ignore */\n    private size() {\n        const rect = this.el.nativeElement.getBoundingClientRect();\n        return new Size(\n            rect.width || rect.right - rect.left,\n            rect.height || rect.bottom - rect.top\n        );\n    }\n\n    /** @ignore */\n    ngOnChanges() {\n        this.source.setType(this.spec.type);\n    }\n    /** @ignore */\n    ngOnDestroy() {\n        this.source.unsubscribe();\n    }\n}\n","import { SortableSpec, DraggedItem } from './types';\nimport { DropTargetMonitor, DragSourceMonitor } from '@rednax/core';\nimport { Observable } from 'rxjs';\n\nexport enum SortableEvents {\n    BeginDrag = 'BeginDrag',\n    Hover = 'Hover',\n    Drop = 'Drop',\n    EndDrag = 'EndDrag',\n}\n\nexport class BeginDragAction<AT, T> {\n    readonly event = SortableEvents.BeginDrag;\n    constructor(\n        public readonly type: AT,\n        public readonly item: DraggedItem<T>\n    ) {}\n}\n\nexport class HoverAction<AT, T> {\n    readonly event = SortableEvents.Hover;\n    constructor(\n        public readonly type: AT,\n        public readonly item: DraggedItem<T>\n    ) {}\n}\n\nexport class DropAction<AT, T> {\n    readonly event = SortableEvents.Drop;\n    constructor(\n        public readonly type: AT,\n        public readonly item: DraggedItem<T>\n    ) {}\n}\n\nexport class EndDragAction<AT, T> {\n    readonly event = SortableEvents.EndDrag;\n    constructor(\n        public readonly type: AT,\n        public readonly item: DraggedItem<T>\n    ) {}\n}\n\nexport type SortableAction<AT, D> =\n    | BeginDragAction<AT, D>\n    | HoverAction<AT, D>\n    | DropAction<AT, D>\n    | EndDragAction<AT, D>;\n\n/** Intended to be your NgRx Store object */\nexport interface Dispatcher {\n    dispatch: (action: SortableAction<any, any>) => void;\n}\n\nexport interface NgRxSortableConfiguration<D> {\n    type: string | symbol;\n    accepts?: string | symbol | (string | symbol)[];\n    trackBy: (data: D) => any;\n    getList: (listId: any) => Observable<Iterable<D>>;\n    canDrop?: (\n        item: DraggedItem<D>,\n        monitor: DropTargetMonitor<DraggedItem<D>>\n    ) => boolean;\n    canDrag?: (\n        data: D,\n        listId: any,\n        monitor: DragSourceMonitor<void, void>\n    ) => boolean;\n    isDragging?: (ground: D, inFlight: DraggedItem<D>) => boolean;\n    createData?: () => D;\n}\n\nexport class NgRxSortable<D> implements SortableSpec<D> {\n    public type!: string | symbol;\n    public accepts?: string | symbol | (string | symbol)[];\n    public trackBy!: (data: D) => any;\n    public getList!: (listId: any) => Observable<Iterable<D>>;\n    public canDrop?: (\n        item: DraggedItem<D>,\n        monitor: DropTargetMonitor<DraggedItem<D>>\n    ) => boolean;\n    public canDrag?: (\n        data: D,\n        listId: any,\n        monitor: DragSourceMonitor<void, void>\n    ) => boolean;\n    public isDragging?: (ground: D, inFlight: DraggedItem<D>) => boolean;\n    public createData?: () => D;\n\n    /**\n     * @param store      An @ngrx store instance.\n     * @param actionType The type in your own @ngrx/store `ActionTypes` enum you want the sortable actions to use.\n     * @param configure  You must provide `trackBy` and `getList` functions here. Hopefully your `getList` will select from the store you passed!\n     * */\n    constructor(\n        protected store: Dispatcher,\n        protected actionType: string,\n        configure: NgRxSortableConfiguration<D>\n    ) {\n        if (configure.type !== undefined) this.type = configure.type;\n        if (configure.accepts !== undefined) this.accepts = configure.accepts;\n        if (configure.trackBy !== undefined) this.trackBy = configure.trackBy;\n        if (configure.getList !== undefined) this.getList = configure.getList;\n        if (configure.canDrag !== undefined) this.canDrag = configure.canDrag;\n        if (configure.canDrop !== undefined) this.canDrop = configure.canDrop;\n        if (configure.isDragging !== undefined)\n            this.isDragging = configure.isDragging;\n        if (configure.createData !== undefined)\n            this.createData = configure.createData;\n    }\n\n    // We now implement the SortableSpec interface by dispatching actions\n\n    beginDrag = (\n        item: DraggedItem<D>,\n        _monitor: DragSourceMonitor<void, void>\n    ): void => {\n        this.store.dispatch(new BeginDragAction(this.actionType, item));\n    };\n    hover = (\n        item: DraggedItem<D>,\n        _monitor: DropTargetMonitor<DraggedItem<D>>\n    ): void => {\n        this.store.dispatch(new HoverAction(this.actionType, item));\n    };\n    drop = (\n        item: DraggedItem<D>,\n        _monitor: DropTargetMonitor<DraggedItem<D>>\n    ): void => {\n        this.store.dispatch(new DropAction(this.actionType, item));\n    };\n    endDrag = (\n        item: DraggedItem<D>,\n        _monitor: DragSourceMonitor<DraggedItem<D>>\n    ): void => {\n        this.store.dispatch(new EndDragAction(this.actionType, item));\n    };\n}\n","import { SkyhookDndService, DropTarget } from '@rednax/core';\nimport { DraggedItem } from './types';\nimport { Subject } from 'rxjs';\nimport { filter, distinctUntilChanged } from 'rxjs/operators';\n\nexport const SPILLED_LIST_ID: symbol = Symbol('SPILLED_LIST_ID');\n\nexport interface SpillConfiguration<Data> {\n    drop?: (item: DraggedItem<Data>) => void;\n    hover?: (item: DraggedItem<Data>) => void;\n}\n\nexport function spillTarget<Data>(\n    dnd: SkyhookDndService,\n    types: string | symbol | Array<string | symbol> | null,\n    config: SpillConfiguration<Data>\n): DropTarget<DraggedItem<Data>> {\n    const mutate = (item: DraggedItem<Data> | null) => {\n        if (!item) return null;\n        item.hover = { listId: SPILLED_LIST_ID, index: -1 };\n        return { ...item };\n    };\n\n    const hover$ = new Subject<DraggedItem<Data> | null>();\n\n    const target = dnd.dropTarget<DraggedItem<Data>>(types, {\n        hover: (monitor) => {\n            if (monitor.canDrop() && monitor.isOver({ shallow: true })) {\n                const item = mutate(monitor.getItem());\n                hover$.next(item);\n            } else {\n                hover$.next(null);\n            }\n        },\n        drop:\n            (config.drop &&\n                ((monitor) => {\n                    const item = mutate(monitor.getItem());\n                    if (!monitor.didDrop()) {\n                        config.drop && item && config.drop(item);\n                    }\n                })) ||\n            undefined,\n    });\n\n    const spilled$ = hover$.pipe(\n        distinctUntilChanged(),\n        filter((a) => !!a)\n    );\n\n    const subs = spilled$.subscribe((item) => {\n        config.hover && item && config.hover(item);\n    });\n\n    target.add(subs);\n    return target;\n}\n","import { NgModule } from '@angular/core';\nimport { SkyhookSortable } from './directives/sortable.directive';\nimport { SkyhookSortableList } from './directives/list.component';\nimport { SkyhookSortableTemplate } from './directives/template.directive';\nimport { SkyhookSortableRenderer } from './directives/render.directive';\nimport { SkyhookSortableExternal } from './directives/external.directive';\nimport { CommonModule } from '@angular/common';\nimport { SkyhookDndModule } from '@rednax/core';\n\n/** @ignore */\nconst EXPORTS = [\n    SkyhookSortable,\n    SkyhookSortableList,\n    SkyhookSortableTemplate,\n    SkyhookSortableRenderer,\n    SkyhookSortableExternal,\n];\n\n@NgModule({\n    declarations: EXPORTS,\n    exports: EXPORTS,\n    imports: [CommonModule, SkyhookDndModule],\n})\nexport class SkyhookSortableModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i0.ɵɵelementContainer","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","i0.ɵɵadvance","i0.ɵɵproperty"],"mappings":";;;;;;MAuHa,IAAI;IACb,YAAmB,KAAa,EAAS,MAAc;QAApC,UAAK,GAAL,KAAK,CAAQ;QAAS,WAAM,GAAN,MAAM,CAAQ;KAAI;IAC3D,KAAK;QACD,OAAO;YACH,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI;YACxB,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI;SAC7B,CAAC;KACL;CACJ;IAgBW;AAAZ,WAAY,YAAY;IACpB,mCAAmB,CAAA;IACnB,+BAAe,CAAA;AACnB,CAAC,EAHW,YAAY,KAAZ,YAAY;;AC/IxB;;;SAGgB,OAAO,CAAC,IAAmB;IACvC,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE;QAChB,OAAO,KAAK,CAAC;KAChB;IACD,OAAO,IAAI,CAAC;AAChB;;MCkBa,eAAe;;IA+BxB,YACc,GAAsB,EACtB,EAA2B,EAC3B,GAAsB;QAFtB,QAAG,GAAH,GAAG,CAAmB;QACtB,OAAE,GAAF,EAAE,CAAyB;QAC3B,QAAG,GAAH,GAAG,CAAmB;QAhCT,WAAM,GAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;QACnC,eAAU,GAAG,KAAK,CAAC;;;;;QAOtB,iBAAY,GAAG,YAAY,CAAC,OAAO,CAAC;;QAGxD,qBAAgB,GAAG,IAAI,eAAe,CAAiB,EAAE,CAAC,CAAC;;;;QAI5D,cAAS,GAA+B,IAAI,CAAC,gBAAgB,CAAC;;QAGrE,SAAI,GAAG,IAAI,YAAY,EAAE,CAAC;;QAE1B,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAc1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAC7B,IAAI,EACJ;YACI,OAAO,EAAE,CAAC,OAAO;gBACb,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,EAAE;oBAC1C,OAAO,KAAK,CAAC;iBAChB;gBACD,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC/B,IAAI,CAAC,IAAI,EAAE;oBACP,OAAO,KAAK,CAAC;iBAChB;gBACD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aACzC;YACD,IAAI,EAAE,CAAC,OAAO;gBACV,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC/B,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;oBACxC,IAAI,CAAC,IAAI;wBACL,IAAI,CAAC,IAAI,CAAC,IAAI;wBACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;iBACrC;gBACD,OAAO,EAAE,CAAC;aACb;YACD,KAAK,EAAE,CAAC,OAAO;gBACX,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC/B,IAAI,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE;oBACjD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;oBAC/C,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE;wBAC9C,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE;4BAC1B,MAAM,EAAE,IAAI,CAAC,MAAM;4BACnB,KAAK,EAAE,CAAC;yBACX,CAAC,CAAC;qBACN;iBACJ;aACJ;SACJ,EACD,IAAI,CAAC,IAAI,CACZ,CAAC;KACL;;IAGO,kBAAkB;QACtB,MAAM,SAAS,GACX,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC;QAC/D,IAAI,SAAS,IAAI,IAAI,CAAC,IAAI,EAAE;YACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAChC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;aAC/B;YAED,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACnB,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3C,IAAI,CAAC,QAAQ;oBACT,GAAG;wBACH,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;4BACZ,IAAI,CAAC,EAAE;gCACH,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gCAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;gCAClB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;6BAC3B;yBACJ,CAAC,CAAC;gBAEP,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAChC;SACJ;KACJ;IAEM,UAAU,CAAC,IAAU,EAAE,KAAa;QACvC,OAAO;YACH,IAAI;YACJ,KAAK;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,YAAY,EAAE,IAAI,CAAC,YAAY;SAClC,CAAC;KACL;;IAGO,UAAU,CACd,IAAuB,EACvB,OAA6C,EAC7C,QAAQ,GAAG,IAAI;QAEf,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAChC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAC3C;QACD,OAAO,QAAQ,CAAC;KACnB;;IAGO,SAAS,CACb,IAAuB,EACvB,OAA6C,EAC7C,QAAyC;QAEzC,IAAI,QAAQ,EAAE;;YAEV,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;;;YAGtB,IAAI,qBAAQ,IAAI,CAAE,CAAC;SACtB;QACD,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAClE;;IAGD,QAAQ;QACJ,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;KAC9C;IAED,aAAa;QACT,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;SAC5B;aAAM;YACH,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;SAC9C;KACJ;IAED,WAAW,CAAC,EAA0B;QAClC,IAAI,EAAE,IAAI,IAAI;YAAE,OAAO,KAAK,CAAC;QAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAClC,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,OAAiC,CAAC;YACxD,OAAO,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;SACjC;aAAM;YACH,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAC/B,OAAO,EAAE,IAAI,GAAG,CAAC;SACpB;KACJ;;IAGD,WAAW,CAAC,EAAE,IAAI,EAAE,MAAM,EAAiB;QACvC,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;QACD,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;KAC9C;;IAGD,eAAe;QACX,IAAI,IAAI,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;SACxD;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAChE;KACJ;;IAGD,WAAW;QACP,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;KAC3B;;8EA7LQ,eAAe;iDAAf,eAAe;+CAAf,eAAe;cAJ3B,SAAS;eAAC;gBACP,QAAQ,EAAE,cAAc;gBACxB,QAAQ,EAAE,YAAY;aACzB;oHAG8B,MAAM;kBAAhC,KAAK;mBAAC,kBAAkB;YACM,UAAU;kBAAxC,KAAK;mBAAC,sBAAsB;YACM,IAAI;kBAAtC,KAAK;mBAAC,gBAAgB;YACM,QAAQ;kBAApC,KAAK;mBAAC,oBAAoB;YAKC,YAAY;kBAAvC,KAAK;mBAAC,mBAAmB;;;MC1BjB,uBAAuB;;8FAAvB,uBAAuB;yDAAvB,uBAAuB;+CAAvB,uBAAuB;cAHnC,SAAS;eAAC;gBACP,QAAQ,EAAE,cAAc;aAC3B;;;;ICmBWA,qBAQe;;;;IAXnBC,0BAGI;IAAAC,kGAQA;IACJC,uBAAe;;;;;IARPC,YAKC;IALDC,+CAKC,sFAAA;;MAoBJ,mBAA0B,SAAQ,eAAqB;;IAehE,YACI,GAAsB,EACtB,EAA2B,EAC3B,GAAsB;QAEtB,KAAK,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;;QAIxB,cAAS,GAAG,CAAC,CAAS,EAAE,IAAU;YAC9B,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC/C,CAAC;KALD;;IAhBD,IAGI,iBAAiB,CAAC,EAAiD;QACnE,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;YACf,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC;SAC5B;KACJ;;IAiBD,kBAAkB;QACd,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM,IAAI,KAAK,CACX,sGAAsG,CACzG,CAAC;SACL;KACJ;;;IAKD,QAAQ;QACJ,KAAK,CAAC,QAAQ,EAAE,CAAC;KACpB;;IAGD,eAAe;QACX,KAAK,CAAC,eAAe,EAAE,CAAC;KAC3B;;IAGD,WAAW,CAAC,OAAsB;QAC9B,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;KAC9B;;IAGD,WAAW;QACP,KAAK,CAAC,WAAW,EAAE,CAAC;KACvB;;sFAzDQ,mBAAmB;qDAAnB,mBAAmB;iCAKX,uBAAuB,SAC9B,WAAW;;;;yFAbV;YACP;gBACI,OAAO,EAAE,eAAe;gBACxB,WAAW,EAAE,mBAAmB;aACnC;SACJ;QA3BGH,mFAGI;;QAFAG,mCAAgE,+BAAA;;+CA4B/D,mBAAmB;cAjC/B,SAAS;eAAC;gBACP,QAAQ,EAAE,uBAAuB;gBACjC,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,QAAQ,EAAE;;;;;;;;;;;;;;KAcT;gBACD,MAAM,EAAE;oBACJ;;;;SAIC;iBACJ;;gBAED,SAAS,EAAE;oBACP;wBACI,OAAO,EAAE,eAAe;wBACxB,WAAW,EAAE,mBAAmB;qBACnC;iBACJ;aACJ;oHAGwB,QAAQ;kBAA5B,KAAK;mBAAC,YAAY;YAMf,iBAAiB;kBAHpB,eAAe;mBAAC,uBAAuB,EAAE;oBACtC,IAAI,EAAE,WAAW;iBACpB;;;ACzDL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;SAEgB,cAAc,CAC1B,GAAwB,EACxB,IAAuB,EACvB,IAA0B,EAC1B,YAAoB;IAEpB,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IACvB,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU;UACpB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI;UACpC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;IAC5C,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;IACpD,MAAM,YAAY,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC;IACvC,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;IAC/D,MAAM,OAAO,GAAG,KAAK,GAAG,YAAY,CAAC;IACrC,IAAI,cAAsB,CAAC;IAC3B,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;QAC7B,IAAI,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE;YACzB,cAAc,GAAG,OAAO,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;SACxD;aAAM;YACH,cAAc,GAAG,OAAO,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC;SACxD;KACJ;SAAM;;;QAGH,cAAc,GAAG,OAAO,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;KACxD;IACD,OAAO,cAAc,CAAC;AAC1B,CAAC;SAEe,YAAY,CAAO,GAAwB;IACvD,OAAO,GAAG,CAAC,KAAK,CAAC;AACrB,CAAC;SAEe,YAAY,CAAC,OAAqB;IAC9C,QAAQ,OAAO;QACX,KAAK,YAAY,CAAC,KAAK;YACnB,OAAO,YAAY,CAAC;QACxB;YACI,OAAO,cAAc,CAAC;KAC7B;AACL;;AC1DA;AACA,MAAM,0BAA0B,GAC5B,qBAAqB;IACrB,2BAA2B;KAC1B,CAAC,CAAa,KAAK,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAM7B,uBAAuB;;IAwDhC,YACY,GAAsB,EACtB,EAA2B;QAD3B,QAAG,GAAH,GAAG,CAAmB;QACtB,OAAE,GAAF,EAAE,CAAyB;;QAvB/B,SAAI,GAAG,IAAI,YAAY,EAAE,CAAC;;QAiG1B,YAAO,GAAG,CAAC,IAAU,EAAE,KAAwB;YACnD,QACI,IAAI;gBACJ,KAAK,CAAC,IAAI;gBACV,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAC3D;SACL,CAAC;QA9EE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAC7B,IAAI,EACJ;;YAEI,OAAO,EAAE,MAAM,KAAK;YACpB,KAAK,EAAE,CAAC,OAAO;gBACX,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACvB;SACJ,EACD,IAAI,CAAC,IAAI,CACZ,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAC7B,IAAI,EACJ;YACI,OAAO,EAAE,CAAC,OAAO;gBACb,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aACnC;YACD,UAAU,EAAE,CAAC,OAAO;gBAChB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;aAC7C;YACD,SAAS,EAAE,CAAC,OAAO;gBACf,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;;;;;;;gBAQ/B,IAAI,CAAC,IAAI;oBACL,IAAI,CAAC,IAAI,CAAC,SAAS;oBACnB,0BAA0B,CAAC;wBACvB,IAAI,CAAC,IAAI;4BACL,IAAI,CAAC,IAAI,CAAC,SAAS;4BACnB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;qBAC1C,CAAC,CAAC;gBAEP,OAAO,IAAI,CAAC;aACf;YACD,OAAO,EAAE,CAAC,OAAO;gBACb,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC/B,IAAI,IAAI,EAAE;oBACN,IAAI,CAAC,IAAI;wBACL,IAAI,CAAC,IAAI,CAAC,OAAO;wBACjB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;iBACxC;aACJ;SACJ,EACD,IAAI,CAAC,IAAI,CACZ,CAAC;QAEF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC;KAChE;IA9GD,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;KAC5B;;IAED,IAAY,IAAI;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;KACtD;;IAED,IAAY,OAAO;QACf,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAC/B,IAAI,CAAC,IAAI;YAAE,OAAO,EAAE,CAAC;QACrB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;aAAM;YACH,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC;SACpC;KACJ;;IAED,IAAY,MAAM;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;KAC9B;;IAED,IAAY,KAAK;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;KAC7B;;IAGD,IAAY,IAAI;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;KAC5B;;IAoFO,UAAU;QACd,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI;YAChB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,KAAK,EAAE;gBACH,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB;SACJ,CAAC;KACL;;IAYO,UAAU,CAAC,OAAsC;QACrD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAChC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SAC7D;QACD,OAAO,IAAI,CAAC;KACf;;IAGO,UAAU,CAAC,IAA8B;QAC7C,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACnC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC;SACnE;aAAM;YACH,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC;SAC3D;KACJ;;IAGO,KAAK,CAAC,OAA6C;QACvD,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAC/B,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC;QAC/C,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,IAAI,IAAI,EAAE;YACtC,OAAO;SACV;;QAED,IACI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACrB,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK;YAC/B,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EACnC;YACE,OAAO;SACV;QACD,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACvB,IAAI,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACxD,IAAI,cAAc,GAAG,SAAS,CAC1B,IAAI,CAAC,OAAO,EACZ,IAAI,EACJ,IAAI,CAAC,IAAI,EAAE,EACX,YAAY,CACf,CAAC;;QAGF,IAAI,cAAc,GAAG,CAAC,EAAE;;;YAGpB,MAAM,IAAI,KAAK,CACX,uDAAuD,CAC1D,CAAC;SACL;;QAGD,IAAI,cAAc,KAAK,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;YAChE,IAAI,CAAC,KAAK,GAAG;gBACT,KAAK,EAAE,cAAc;gBACrB,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC;YACF,IACI,IAAI,CAAC,IAAI;gBACT,IAAI,CAAC,IAAI,CAAC,OAAO;gBACjB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,EACnC;gBACE,OAAO;aACV;;YAED,IAAI,CAAC,IAAI;gBACL,IAAI,CAAC,IAAI,CAAC,KAAK;gBACf,IAAI,CAAC,IAAI,CAAC,KAAK,mBAEJ,IAAI,GAEX,OAAO,CACV,CAAC;SACT;KACJ;;IAGO,IAAI;QACR,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACV,MAAM,IAAI,KAAK,CACX,4EAA4E,CAC/E,CAAC;SACL;QACD,MAAM,IAAI,GAAI,IAAI,CAAC,EAAE,CAAC,aAAyB,CAAC,qBAAqB,EAAE,CAAC;QACxE,OAAO,IAAI,CAAC;KACf;;IAGO,IAAI;QACR,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACzB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACnD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;QACrD,OAAO,IAAI,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KAClC;;IAGD,QAAQ;QACJ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClC;;IAGD,eAAe;QACX,IAAI,IAAI,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;SACxD;KACJ;;IAGD,WAAW;QACP,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClC;;IAGD,WAAW;QACP,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;KAC3B;;8FAhQQ,uBAAuB;yDAAvB,uBAAuB;+CAAvB,uBAAuB;cAJnC,SAAS;eAAC;gBACP,QAAQ,EAAE,YAAY;gBACtB,QAAQ,EAAE,UAAU;aACvB;uFAEsB,OAAO;kBAAzB,KAAK;mBAAC,UAAU;;;MCXR,gBAAgB,GAAW,MAAM,CAAC,kBAAkB,EAAE;MAMtD,uBAAuB;;IAUhC,YACY,GAAsB,EACtB,EAAuB;QADvB,QAAG,GAAH,GAAG,CAAmB;QACtB,OAAE,GAAF,EAAE,CAAqB;QAE/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAoB,IAAI,EAAE;YACvD,OAAO,EAAE,CAAC,OAAO;gBACb,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;;;oBAGhC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CACpB,SAAgB,EAChB,SAAS,EACT,OAAO,CACV,CAAC;iBACL;gBACD,OAAO,IAAI,CAAC;aACf;YACD,SAAS,EAAE;gBACP,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,KAAK,UAAU,EAAE;oBAC5C,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;iBACzD;gBACD,OAAO;oBACH,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;oBACpB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;oBAC5B,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE;oBAC9C,UAAU,EAAE,KAAK;oBACjB,KAAK,EAAE,CAAC,CAAC;oBACT,MAAM,EAAE,gBAAgB;oBACxB,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;iBACpB,CAAC;aACL;YACD,OAAO,EAAE,CAAC,OAAO;gBACb,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC/B,IAAI,IAAI,EAAE;oBACN,IAAI,CAAC,IAAI;wBACL,IAAI,CAAC,IAAI,CAAC,OAAO;wBACjB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;iBACxC;aACJ;SACJ,CAAC,CAAC;KACN;;IAGO,IAAI;QACR,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;QAC3D,OAAO,IAAI,IAAI,CACX,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EACpC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CACxC,CAAC;KACL;;IAGD,WAAW;QACP,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;;IAED,WAAW;QACP,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;KAC7B;;8FApEQ,uBAAuB;yDAAvB,uBAAuB;+CAAvB,uBAAuB;cAJnC,SAAS;eAAC;gBACP,QAAQ,EAAE,cAAc;gBACxB,QAAQ,EAAE,YAAY;aACzB;uFAEwB,IAAI;kBAAxB,KAAK;mBAAC,YAAY;;;ICfX;AAAZ,WAAY,cAAc;IACtB,yCAAuB,CAAA;IACvB,iCAAe,CAAA;IACf,+BAAa,CAAA;IACb,qCAAmB,CAAA;AACvB,CAAC,EALW,cAAc,KAAd,cAAc,QAKzB;MAEY,eAAe;IAExB,YACoB,IAAQ,EACR,IAAoB;QADpB,SAAI,GAAJ,IAAI,CAAI;QACR,SAAI,GAAJ,IAAI,CAAgB;QAH/B,UAAK,GAAG,cAAc,CAAC,SAAS,CAAC;KAItC;CACP;MAEY,WAAW;IAEpB,YACoB,IAAQ,EACR,IAAoB;QADpB,SAAI,GAAJ,IAAI,CAAI;QACR,SAAI,GAAJ,IAAI,CAAgB;QAH/B,UAAK,GAAG,cAAc,CAAC,KAAK,CAAC;KAIlC;CACP;MAEY,UAAU;IAEnB,YACoB,IAAQ,EACR,IAAoB;QADpB,SAAI,GAAJ,IAAI,CAAI;QACR,SAAI,GAAJ,IAAI,CAAgB;QAH/B,UAAK,GAAG,cAAc,CAAC,IAAI,CAAC;KAIjC;CACP;MAEY,aAAa;IAEtB,YACoB,IAAQ,EACR,IAAoB;QADpB,SAAI,GAAJ,IAAI,CAAI;QACR,SAAI,GAAJ,IAAI,CAAgB;QAH/B,UAAK,GAAG,cAAc,CAAC,OAAO,CAAC;KAIpC;CACP;MA+BY,YAAY;;;;;;IAsBrB,YACc,KAAiB,EACjB,UAAkB,EAC5B,SAAuC;QAF7B,UAAK,GAAL,KAAK,CAAY;QACjB,eAAU,GAAV,UAAU,CAAQ;;QAiBhC,cAAS,GAAG,CACR,IAAoB,EACpB,QAAuC;YAEvC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;SACnE,CAAC;QACF,UAAK,GAAG,CACJ,IAAoB,EACpB,QAA2C;YAE3C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;SAC/D,CAAC;QACF,SAAI,GAAG,CACH,IAAoB,EACpB,QAA2C;YAE3C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;SAC9D,CAAC;QACF,YAAO,GAAG,CACN,IAAoB,EACpB,QAA2C;YAE3C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;SACjE,CAAC;QArCE,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS;YAAE,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QAC7D,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS;YAAE,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QACtE,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS;YAAE,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QACtE,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS;YAAE,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QACtE,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS;YAAE,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QACtE,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS;YAAE,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QACtE,IAAI,SAAS,CAAC,UAAU,KAAK,SAAS;YAClC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;QAC3C,IAAI,SAAS,CAAC,UAAU,KAAK,SAAS;YAClC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;KAC9C;;;MCxGQ,eAAe,GAAW,MAAM,CAAC,iBAAiB,EAAE;SAOjD,WAAW,CACvB,GAAsB,EACtB,KAAsD,EACtD,MAAgC;IAEhC,MAAM,MAAM,GAAG,CAAC,IAA8B;QAC1C,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,EAAE,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;QACpD,yBAAY,IAAI,EAAG;KACtB,CAAC;IAEF,MAAM,MAAM,GAAG,IAAI,OAAO,EAA4B,CAAC;IAEvD,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,CAAoB,KAAK,EAAE;QACpD,KAAK,EAAE,CAAC,OAAO;YACX,IAAI,OAAO,CAAC,OAAO,EAAE,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE;gBACxD,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;gBACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;SACJ;QACD,IAAI,EACA,CAAC,MAAM,CAAC,IAAI;aACP,CAAC,OAAO;gBACL,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;gBACvC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;oBACpB,MAAM,CAAC,IAAI,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC5C;aACJ,CAAC;YACN,SAAS;KAChB,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CACxB,oBAAoB,EAAE,EACtB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACrB,CAAC;IAEF,MAAM,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI;QACjC,MAAM,CAAC,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC9C,CAAC,CAAC;IAEH,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjB,OAAO,MAAM,CAAC;AAClB;;AC/CA;AACA,MAAM,OAAO,GAAG;IACZ,eAAe;IACf,mBAAmB;IACnB,uBAAuB;IACvB,uBAAuB;IACvB,uBAAuB;CAC1B,CAAC;MAOW,qBAAqB;;sDAArB,qBAAqB;sHAArB,qBAAqB,kBAFrB,CAAC,YAAY,EAAE,gBAAgB,CAAC;qFAEhC,qBAAqB,mBAZ9B,eAAe;QACf,mBAAmB;QACnB,uBAAuB;QACvB,uBAAuB;QACvB,uBAAuB,aAMb,YAAY,EAAE,gBAAgB,aAVxC,eAAe;QACf,mBAAmB;QACnB,uBAAuB;QACvB,uBAAuB;QACvB,uBAAuB;+CAQd,qBAAqB;cALjC,QAAQ;eAAC;gBACN,YAAY,EAAE,OAAO;gBACrB,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;aAC5C;;;ACtBD;;;;;;"}