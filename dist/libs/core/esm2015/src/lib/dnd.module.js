import { NgModule, NgZone } from '@angular/core';
import { SkyhookDndService } from './connector.service';
import { DndDirective, DragSourceDirective, DropTargetDirective, DragPreviewDirective, } from './dnd.directive';
import { DRAG_DROP_BACKEND, DRAG_DROP_BACKEND_OPTIONS, DRAG_DROP_BACKEND_DEBUG_MODE, DRAG_DROP_MANAGER, DRAG_DROP_GLOBAL_CONTEXT, } from './tokens';
import { createDragDropManager, } from 'dnd-core';
import { invariant } from './internal/invariant';
import * as i0 from "@angular/core";
/** @ignore */
export function unpackBackendForEs5Users(backendOrModule) {
    // Auto-detect ES6 default export for people still using ES5
    let backend = backendOrModule;
    if (typeof backend === 'object' && typeof backend.default === 'function') {
        backend = backend.default;
    }
    invariant(typeof backend === 'function', 'Expected the backend to be a function or an ES6 module exporting a default function. ' +
        'Read more: http://react-dnd.github.io/react-dnd/docs-drag-drop-context.html');
    return backend;
}
// TODO allow injecting window
/** @ignore */
// @dynamic
export function managerFactory(backendFactory, zone, context, backendOptions, debugMode) {
    backendFactory = unpackBackendForEs5Users(backendFactory);
    return zone.runOutsideAngular(() => createDragDropManager(backendFactory, context, backendOptions, debugMode));
}
/** @ignore */
export function getGlobalContext() {
    return typeof global !== 'undefined' ? global : window;
}
/** @ignore */
const EXPORTS = [
    DndDirective,
    DragSourceDirective,
    DropTargetDirective,
    DragPreviewDirective,
];
// @dynamic
export class SkyhookDndModule {
    static forRoot(backendOrBackendFactory) {
        return {
            ngModule: SkyhookDndModule,
            providers: [
                {
                    provide: DRAG_DROP_BACKEND,
                    // whichever one they have provided, the other will be undefined
                    useValue: backendOrBackendFactory.backend,
                    useFactory: backendOrBackendFactory
                        .backendFactory,
                },
                {
                    provide: DRAG_DROP_BACKEND_OPTIONS,
                    // whichever one they have provided, the other will be undefined
                    useValue: backendOrBackendFactory.options,
                },
                {
                    provide: DRAG_DROP_BACKEND_DEBUG_MODE,
                    // whichever one they have provided, the other will be undefined
                    useValue: backendOrBackendFactory.debug,
                },
                {
                    provide: DRAG_DROP_GLOBAL_CONTEXT,
                    useFactory: getGlobalContext,
                },
                {
                    provide: DRAG_DROP_MANAGER,
                    useFactory: managerFactory,
                    deps: [
                        DRAG_DROP_BACKEND,
                        NgZone,
                        DRAG_DROP_GLOBAL_CONTEXT,
                        DRAG_DROP_BACKEND_OPTIONS,
                        DRAG_DROP_BACKEND_DEBUG_MODE,
                    ],
                },
                SkyhookDndService,
            ],
        };
    }
}
SkyhookDndModule.ɵmod = i0.ɵɵdefineNgModule({ type: SkyhookDndModule });
SkyhookDndModule.ɵinj = i0.ɵɵdefineInjector({ factory: function SkyhookDndModule_Factory(t) { return new (t || SkyhookDndModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(SkyhookDndModule, { declarations: [DndDirective,
        DragSourceDirective,
        DropTargetDirective,
        DragPreviewDirective], exports: [DndDirective,
        DragSourceDirective,
        DropTargetDirective,
        DragPreviewDirective] }); })();
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(SkyhookDndModule, [{
        type: NgModule,
        args: [{
                declarations: EXPORTS,
                exports: EXPORTS,
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29yZS9zcmMvbGliL2RuZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hELE9BQU8sRUFDSCxZQUFZLEVBQ1osbUJBQW1CLEVBQ25CLG1CQUFtQixFQUNuQixvQkFBb0IsR0FDdkIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLHlCQUF5QixFQUN6Qiw0QkFBNEIsRUFDNUIsaUJBQWlCLEVBQ2pCLHdCQUF3QixHQUMzQixNQUFNLFVBQVUsQ0FBQztBQUVsQixPQUFPLEVBQ0gscUJBQXFCLEdBR3hCLE1BQU0sVUFBVSxDQUFDO0FBRWxCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFFakQsY0FBYztBQUNkLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxlQUFvQjtJQUN6RCw0REFBNEQ7SUFDNUQsSUFBSSxPQUFPLEdBQUcsZUFBZSxDQUFDO0lBQzlCLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxJQUFJLE9BQU8sT0FBTyxDQUFDLE9BQU8sS0FBSyxVQUFVLEVBQUU7UUFDdEUsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7S0FDN0I7SUFDRCxTQUFTLENBQ0wsT0FBTyxPQUFPLEtBQUssVUFBVSxFQUM3Qix1RkFBdUY7UUFDbkYsNkVBQTZFLENBQ3BGLENBQUM7SUFDRixPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBRUQsOEJBQThCO0FBQzlCLGNBQWM7QUFDZCxXQUFXO0FBQ1gsTUFBTSxVQUFVLGNBQWMsQ0FDMUIsY0FBOEIsRUFDOUIsSUFBWSxFQUNaLE9BQVksRUFDWixjQUFvQixFQUNwQixTQUFtQjtJQUVuQixjQUFjLEdBQUcsd0JBQXdCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDMUQsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQy9CLHFCQUFxQixDQUNqQixjQUFjLEVBQ2QsT0FBTyxFQUNQLGNBQWMsRUFDZCxTQUFTLENBQ1osQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUlELGNBQWM7QUFDZCxNQUFNLFVBQVUsZ0JBQWdCO0lBQzVCLE9BQU8sT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFFLE1BQWMsQ0FBQztBQUNwRSxDQUFDO0FBdURELGNBQWM7QUFDZCxNQUFNLE9BQU8sR0FBRztJQUNaLFlBQVk7SUFDWixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLG9CQUFvQjtDQUN2QixDQUFDO0FBRUYsV0FBVztBQUtYLE1BQU0sT0FBTyxnQkFBZ0I7SUFDekIsTUFBTSxDQUFDLE9BQU8sQ0FDVix1QkFBMkQ7UUFFM0QsT0FBTztZQUNILFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsU0FBUyxFQUFFO2dCQUNQO29CQUNJLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLGdFQUFnRTtvQkFDaEUsUUFBUSxFQUFHLHVCQUF3QyxDQUFDLE9BQU87b0JBQzNELFVBQVUsRUFBRyx1QkFBK0M7eUJBQ3ZELGNBQWM7aUJBQ3RCO2dCQUNEO29CQUNJLE9BQU8sRUFBRSx5QkFBeUI7b0JBQ2xDLGdFQUFnRTtvQkFDaEUsUUFBUSxFQUFHLHVCQUF3QyxDQUFDLE9BQU87aUJBQzlEO2dCQUNEO29CQUNJLE9BQU8sRUFBRSw0QkFBNEI7b0JBQ3JDLGdFQUFnRTtvQkFDaEUsUUFBUSxFQUFFLHVCQUF1QixDQUFDLEtBQUs7aUJBQzFDO2dCQUNEO29CQUNJLE9BQU8sRUFBRSx3QkFBd0I7b0JBQ2pDLFVBQVUsRUFBRSxnQkFBZ0I7aUJBQy9CO2dCQUNEO29CQUNJLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFVBQVUsRUFBRSxjQUFjO29CQUMxQixJQUFJLEVBQUU7d0JBQ0YsaUJBQWlCO3dCQUNqQixNQUFNO3dCQUNOLHdCQUF3Qjt3QkFDeEIseUJBQXlCO3dCQUN6Qiw0QkFBNEI7cUJBQy9CO2lCQUNKO2dCQUNELGlCQUFpQjthQUNwQjtTQUNKLENBQUM7SUFDTixDQUFDOztvREExQ1EsZ0JBQWdCOytHQUFoQixnQkFBZ0I7d0ZBQWhCLGdCQUFnQixtQkFYekIsWUFBWTtRQUNaLG1CQUFtQjtRQUNuQixtQkFBbUI7UUFDbkIsb0JBQW9CLGFBSHBCLFlBQVk7UUFDWixtQkFBbUI7UUFDbkIsbUJBQW1CO1FBQ25CLG9CQUFvQjtrREFRWCxnQkFBZ0I7Y0FKNUIsUUFBUTtlQUFDO2dCQUNOLFlBQVksRUFBRSxPQUFPO2dCQUNyQixPQUFPLEVBQUUsT0FBTzthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU2t5aG9va0RuZFNlcnZpY2UgfSBmcm9tICcuL2Nvbm5lY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgRG5kRGlyZWN0aXZlLFxuICAgIERyYWdTb3VyY2VEaXJlY3RpdmUsXG4gICAgRHJvcFRhcmdldERpcmVjdGl2ZSxcbiAgICBEcmFnUHJldmlld0RpcmVjdGl2ZSxcbn0gZnJvbSAnLi9kbmQuZGlyZWN0aXZlJztcblxuaW1wb3J0IHtcbiAgICBEUkFHX0RST1BfQkFDS0VORCxcbiAgICBEUkFHX0RST1BfQkFDS0VORF9PUFRJT05TLFxuICAgIERSQUdfRFJPUF9CQUNLRU5EX0RFQlVHX01PREUsXG4gICAgRFJBR19EUk9QX01BTkFHRVIsXG4gICAgRFJBR19EUk9QX0dMT0JBTF9DT05URVhULFxufSBmcm9tICcuL3Rva2Vucyc7XG5cbmltcG9ydCB7XG4gICAgY3JlYXRlRHJhZ0Ryb3BNYW5hZ2VyLFxuICAgIEJhY2tlbmRGYWN0b3J5LFxuICAgIERyYWdEcm9wTWFuYWdlcixcbn0gZnJvbSAnZG5kLWNvcmUnO1xuXG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICcuL2ludGVybmFsL2ludmFyaWFudCc7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgZnVuY3Rpb24gdW5wYWNrQmFja2VuZEZvckVzNVVzZXJzKGJhY2tlbmRPck1vZHVsZTogYW55KSB7XG4gICAgLy8gQXV0by1kZXRlY3QgRVM2IGRlZmF1bHQgZXhwb3J0IGZvciBwZW9wbGUgc3RpbGwgdXNpbmcgRVM1XG4gICAgbGV0IGJhY2tlbmQgPSBiYWNrZW5kT3JNb2R1bGU7XG4gICAgaWYgKHR5cGVvZiBiYWNrZW5kID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYmFja2VuZC5kZWZhdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGJhY2tlbmQgPSBiYWNrZW5kLmRlZmF1bHQ7XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIGJhY2tlbmQgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICdFeHBlY3RlZCB0aGUgYmFja2VuZCB0byBiZSBhIGZ1bmN0aW9uIG9yIGFuIEVTNiBtb2R1bGUgZXhwb3J0aW5nIGEgZGVmYXVsdCBmdW5jdGlvbi4gJyArXG4gICAgICAgICAgICAnUmVhZCBtb3JlOiBodHRwOi8vcmVhY3QtZG5kLmdpdGh1Yi5pby9yZWFjdC1kbmQvZG9jcy1kcmFnLWRyb3AtY29udGV4dC5odG1sJ1xuICAgICk7XG4gICAgcmV0dXJuIGJhY2tlbmQ7XG59XG5cbi8vIFRPRE8gYWxsb3cgaW5qZWN0aW5nIHdpbmRvd1xuLyoqIEBpZ25vcmUgKi9cbi8vIEBkeW5hbWljXG5leHBvcnQgZnVuY3Rpb24gbWFuYWdlckZhY3RvcnkoXG4gICAgYmFja2VuZEZhY3Rvcnk6IEJhY2tlbmRGYWN0b3J5LFxuICAgIHpvbmU6IE5nWm9uZSxcbiAgICBjb250ZXh0OiBhbnksXG4gICAgYmFja2VuZE9wdGlvbnM/OiBhbnksXG4gICAgZGVidWdNb2RlPzogYm9vbGVhblxuKTogRHJhZ0Ryb3BNYW5hZ2VyIHtcbiAgICBiYWNrZW5kRmFjdG9yeSA9IHVucGFja0JhY2tlbmRGb3JFczVVc2VycyhiYWNrZW5kRmFjdG9yeSk7XG4gICAgcmV0dXJuIHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT5cbiAgICAgICAgY3JlYXRlRHJhZ0Ryb3BNYW5hZ2VyKFxuICAgICAgICAgICAgYmFja2VuZEZhY3RvcnksXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgYmFja2VuZE9wdGlvbnMsXG4gICAgICAgICAgICBkZWJ1Z01vZGVcbiAgICAgICAgKVxuICAgICk7XG59XG5cbi8qKiBAaWdub3JlICovXG5kZWNsYXJlIHZhciBnbG9iYWw6IGFueTtcbi8qKiBAaWdub3JlICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsQ29udGV4dCgpOiBhbnkge1xuICAgIHJldHVybiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6ICh3aW5kb3cgYXMgYW55KTtcbn1cblxuLypcbiAqIEhvbGQgb24sIHRoaXMgZ2V0cyBhIGxpdHRsZSBjb25mdXNpbmcuXG4gKlxuICogQSBkbmQtY29yZSBCYWNrZW5kIGhhcyBsb3RzIG9mIHVzZWZ1bCBtZXRob2RzIGZvciByZWdpc3RlcmluZyBlbGVtZW50cyBhbmQgZmlyaW5nIGV2ZW50cy5cbiAqIEhvd2V2ZXIsIGJhY2tlbmRzIGFyZSBub3QgZGlzdHJpYnV0ZWQgdGhpcyB3YXkuXG4gKiBUaGUgSFRNTDVCYWNrZW5kIGFuZCB0aGUgVGVzdEJhY2tlbmQsIHdoZW4gaW1wb3J0ZWQgeyBkZWZhdWx0IGFzIEhUTUw1QmFja2VuZCB9LCBhcmUgbm90IEJhY2tlbmRzLCB0aGV5IGFyZVxuICogZnVuY3Rpb25zOiAobWFuYWdlcjogRHJhZ0Ryb3BNYW5hZ2VyKSA9PiBCYWNrZW5kLlxuICogVGhpcyBpcyBub3cga25vd24gYXMgYSBCYWNrZW5kRmFjdG9yeSB1bmRlciBkbmQtY29yZSA0KyB0eXBlc2NyaXB0IGFubm90YXRpb25zLlxuICpcbiAqIEhvd2V2ZXIsIEFuZ3VsYXIgaGFzIGl0cyBvd24gY29uY2VwdGlvbiBvZiB3aGF0IGEgZmFjdG9yeSBpcyBmb3IgQU9ULiBUaGlzIGlzIHRoZSAnZmFjdG9yeSdcbiAqIHRvIHdoaWNoIEJhY2tlbmRGYWN0b3J5SW5wdXQgcmVmZXJzIGJlbG93LlxuICogU29tZXRpbWVzLCB1c2VycyB3aWxsIHdhbnQgdG8gcHJlY29uZmlndXJlIGEgYmFja2VuZCAobGlrZSBUb3VjaEJhY2tlbmQsIG9yIE11bHRpQmFja2VuZCkuXG4gKiBGb3IgdGhpcywgdGhleSBuZWVkIHRvIGV4cG9ydCBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNvbmZpZ3VyZWQgQmFja2VuZEZhY3RvcnlcbiAqIGFuZCBwYXNzIGl0IGluIGFzICB7IGJhY2tlbmRGYWN0b3J5OiBleHBvcnRlZEZ1bmN0aW9uIH0uXG4gKi9cblxuLyoqIFVzZSB0aGlzIGZvciBwcm92aWRpbmcgcGxhaW4gYmFja2VuZHMgdG8ge0BsaW5rIFNreWhvb2tEbmRNb2R1bGUjZm9yUm9vdH0uICovXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tlbmRJbnB1dCB7XG4gICAgLyoqIEEgcGxhaW4gYmFja2VuZCwgZm9yIGV4YW1wbGUgdGhlIEhUTUw1QmFja2VuZC4gKi9cbiAgICBiYWNrZW5kOiBCYWNrZW5kRmFjdG9yeTtcbiAgICBvcHRpb25zPzogYW55O1xuICAgIGRlYnVnPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBVc2UgdGhpcyBmb3IgcHJvdmlkaW5nIGJhY2tlbmRzIHRoYXQgbmVlZCBjb25maWd1cmluZyBiZWZvcmUgdXNlIHRvIHtAbGluayBTa3lob29rRG5kTW9kdWxlI2ZvclJvb3R9LlxuICpcbiAqIEZvciB1c2Ugd2l0aCB0aGUgTXVsdGlCYWNrZW5kOlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGNyZWF0ZURlZmF1bHRNdWx0aUJhY2tlbmQgfSBmcm9tICdAcmVkbmF4L211bHRpLWJhY2tlbmQnO1xuICogLy8gLi4uXG4gKiBTa3lob29rRG5kTW9kdWxlLmZvclJvb3QoeyBiYWNrZW5kRmFjdG9yeTogY3JlYXRlRGVmYXVsdE11bHRpQmFja2VuZCB9KVxuICogYGBgXG4gKlxuICogb3Igd2l0aCB0aGUgVG91Y2hCYWNrZW5kIGJ5IGl0c2VsZjpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBleHBvcnQgZnVuY3Rpb24gY3JlYXRlVG91Y2hCYWNrZW5kKCkge1xuICogICAgIHJldHVybiBUb3VjaEJhY2tlbmQoeyBlbmFibGVNb3VzZUV2ZW50czogZmFsc2UgfSk7XG4gKiB9XG4gKiAvLyAuLi5cbiAqIFNreWhvb2tEbmRNb2R1bGUuZm9yUm9vdCh7IGJhY2tlbmRGYWN0b3J5OiBjcmVhdGVUb3VjaEJhY2tlbmQgfSlcbiAqIGBgYFxuICpcbiAqIFlvdSBoYXZlIHRvIGRvIHRoaXMgdG8gcmV0YWluIEFPVCBjb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tlbmRGYWN0b3J5SW5wdXQge1xuICAgIC8qKiBTZWUgYWJvdmUuICovXG4gICAgYmFja2VuZEZhY3Rvcnk6ICgpID0+IEJhY2tlbmRGYWN0b3J5O1xuICAgIGRlYnVnPzogYm9vbGVhbjtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmNvbnN0IEVYUE9SVFMgPSBbXG4gICAgRG5kRGlyZWN0aXZlLFxuICAgIERyYWdTb3VyY2VEaXJlY3RpdmUsXG4gICAgRHJvcFRhcmdldERpcmVjdGl2ZSxcbiAgICBEcmFnUHJldmlld0RpcmVjdGl2ZSxcbl07XG5cbi8vIEBkeW5hbWljXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogRVhQT1JUUyxcbiAgICBleHBvcnRzOiBFWFBPUlRTLFxufSlcbmV4cG9ydCBjbGFzcyBTa3lob29rRG5kTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdChcbiAgICAgICAgYmFja2VuZE9yQmFja2VuZEZhY3Rvcnk6IEJhY2tlbmRJbnB1dCB8IEJhY2tlbmRGYWN0b3J5SW5wdXRcbiAgICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPGFueT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFNreWhvb2tEbmRNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IERSQUdfRFJPUF9CQUNLRU5ELFxuICAgICAgICAgICAgICAgICAgICAvLyB3aGljaGV2ZXIgb25lIHRoZXkgaGF2ZSBwcm92aWRlZCwgdGhlIG90aGVyIHdpbGwgYmUgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlOiAoYmFja2VuZE9yQmFja2VuZEZhY3RvcnkgYXMgQmFja2VuZElucHV0KS5iYWNrZW5kLFxuICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiAoYmFja2VuZE9yQmFja2VuZEZhY3RvcnkgYXMgQmFja2VuZEZhY3RvcnlJbnB1dClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iYWNrZW5kRmFjdG9yeSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogRFJBR19EUk9QX0JBQ0tFTkRfT1BUSU9OUyxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2hldmVyIG9uZSB0aGV5IGhhdmUgcHJvdmlkZWQsIHRoZSBvdGhlciB3aWxsIGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogKGJhY2tlbmRPckJhY2tlbmRGYWN0b3J5IGFzIEJhY2tlbmRJbnB1dCkub3B0aW9ucyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogRFJBR19EUk9QX0JBQ0tFTkRfREVCVUdfTU9ERSxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2hldmVyIG9uZSB0aGV5IGhhdmUgcHJvdmlkZWQsIHRoZSBvdGhlciB3aWxsIGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogYmFja2VuZE9yQmFja2VuZEZhY3RvcnkuZGVidWcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IERSQUdfRFJPUF9HTE9CQUxfQ09OVEVYVCxcbiAgICAgICAgICAgICAgICAgICAgdXNlRmFjdG9yeTogZ2V0R2xvYmFsQ29udGV4dCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogRFJBR19EUk9QX01BTkFHRVIsXG4gICAgICAgICAgICAgICAgICAgIHVzZUZhY3Rvcnk6IG1hbmFnZXJGYWN0b3J5LFxuICAgICAgICAgICAgICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBEUkFHX0RST1BfQkFDS0VORCxcbiAgICAgICAgICAgICAgICAgICAgICAgIE5nWm9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIERSQUdfRFJPUF9HTE9CQUxfQ09OVEVYVCxcbiAgICAgICAgICAgICAgICAgICAgICAgIERSQUdfRFJPUF9CQUNLRU5EX09QVElPTlMsXG4gICAgICAgICAgICAgICAgICAgICAgICBEUkFHX0RST1BfQkFDS0VORF9ERUJVR19NT0RFLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgU2t5aG9va0RuZFNlcnZpY2UsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==