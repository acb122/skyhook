import { Subscription, BehaviorSubject } from 'rxjs';
import { areCollectsEqual } from '../utils/areCollectsEqual';
import { map, distinctUntilChanged } from 'rxjs/operators';
import { scheduleMicroTaskAfter } from './scheduleMicroTaskAfter';
export class DragLayerConnectionClass {
    constructor(manager, zone) {
        this.manager = manager;
        this.zone = zone;
        this.subscription = new Subscription();
        this.isTicking = false;
        this.handleStateChange = () => {
            const monitor = this.manager.getMonitor();
            this.collector$.next(monitor);
        };
        this.handleOffsetChange = () => {
            const monitor = this.manager.getMonitor();
            this.collector$.next(monitor);
        };
        const monitor = this.manager.getMonitor();
        this.collector$ = new BehaviorSubject(monitor);
        this.unsubscribeFromOffsetChange = monitor.subscribeToOffsetChange(this.handleOffsetChange);
        this.unsubscribeFromStateChange = monitor.subscribeToStateChange(this.handleStateChange);
        this.subscription.add(() => {
            this.unsubscribeFromOffsetChange();
            this.unsubscribeFromStateChange();
        });
        this.handleStateChange();
    }
    listen(mapFn) {
        return this.collector$.pipe(map(mapFn), distinctUntilChanged(areCollectsEqual), scheduleMicroTaskAfter(this.zone));
    }
    unsubscribe() {
        this.collector$.complete();
        this.subscription.unsubscribe();
    }
    add(teardown) {
        return this.subscription.add(teardown);
    }
    get closed() {
        return this.subscription.closed;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1sYXllci1jb25uZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb3JlL3NyYy9saWIvaW50ZXJuYWwvZHJhZy1sYXllci1jb25uZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQWMsZUFBZSxFQUFpQixNQUFNLE1BQU0sQ0FBQztBQUloRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsR0FBRyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFbEUsTUFBTSxPQUFPLHdCQUF3QjtJQVFuQyxZQUFvQixPQUF3QixFQUFVLElBQVU7UUFBNUMsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFNO1FBSHhELGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQXFCMUMsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUVWLHNCQUFpQixHQUFHLEdBQUcsRUFBRTtZQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBc0IsQ0FBQztZQUM5RCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUE7UUFDTyx1QkFBa0IsR0FBRyxHQUFHLEVBQUU7WUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQXNCLENBQUM7WUFDOUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFBO1FBMUJDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBbUIsT0FBTyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLDJCQUEyQixHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FDaEUsSUFBSSxDQUFDLGtCQUFrQixDQUN4QixDQUFDO1FBQ0YsSUFBSSxDQUFDLDBCQUEwQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FDOUQsSUFBSSxDQUFDLGlCQUFpQixDQUN2QixDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ3pCLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQWFELE1BQU0sQ0FBSSxLQUF1QztRQUMvQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN6QixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQ1Ysb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsRUFDdEMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUNsQyxDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELEdBQUcsQ0FBQyxRQUF1QjtRQUN6QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YnNjcmlwdGlvbiwgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCBUZWFyZG93bkxvZ2ljIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEcmFnRHJvcE1hbmFnZXIsIFVuc3Vic2NyaWJlIH0gZnJvbSAnZG5kLWNvcmUnO1xuaW1wb3J0IHsgRHJhZ0xheWVyIH0gZnJvbSAnLi4vY29ubmVjdGlvbi10eXBlcyc7XG5pbXBvcnQgeyBEcmFnTGF5ZXJNb25pdG9yIH0gZnJvbSAnLi4vbGF5ZXItbW9uaXRvcic7XG5pbXBvcnQgeyBhcmVDb2xsZWN0c0VxdWFsIH0gZnJvbSAnLi4vdXRpbHMvYXJlQ29sbGVjdHNFcXVhbCc7XG5pbXBvcnQgeyBtYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgc2NoZWR1bGVNaWNyb1Rhc2tBZnRlciB9IGZyb20gJy4vc2NoZWR1bGVNaWNyb1Rhc2tBZnRlcic7XG5cbmV4cG9ydCBjbGFzcyBEcmFnTGF5ZXJDb25uZWN0aW9uQ2xhc3MgaW1wbGVtZW50cyBEcmFnTGF5ZXIge1xuXG4gIHVuc3Vic2NyaWJlRnJvbU9mZnNldENoYW5nZTogVW5zdWJzY3JpYmU7XG4gIHVuc3Vic2NyaWJlRnJvbVN0YXRlQ2hhbmdlOiBVbnN1YnNjcmliZTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb2xsZWN0b3IkOiBCZWhhdmlvclN1YmplY3Q8RHJhZ0xheWVyTW9uaXRvcj47XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtYW5hZ2VyOiBEcmFnRHJvcE1hbmFnZXIsIHByaXZhdGUgem9uZTogWm9uZSkge1xuICAgIGNvbnN0IG1vbml0b3IgPSB0aGlzLm1hbmFnZXIuZ2V0TW9uaXRvcigpO1xuICAgIHRoaXMuY29sbGVjdG9yJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RHJhZ0xheWVyTW9uaXRvcj4obW9uaXRvcik7XG4gICAgdGhpcy51bnN1YnNjcmliZUZyb21PZmZzZXRDaGFuZ2UgPSBtb25pdG9yLnN1YnNjcmliZVRvT2Zmc2V0Q2hhbmdlKFxuICAgICAgdGhpcy5oYW5kbGVPZmZzZXRDaGFuZ2VcbiAgICApO1xuICAgIHRoaXMudW5zdWJzY3JpYmVGcm9tU3RhdGVDaGFuZ2UgPSBtb25pdG9yLnN1YnNjcmliZVRvU3RhdGVDaGFuZ2UoXG4gICAgICB0aGlzLmhhbmRsZVN0YXRlQ2hhbmdlXG4gICAgKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZCgoKSA9PiB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlRnJvbU9mZnNldENoYW5nZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZUZyb21TdGF0ZUNoYW5nZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5oYW5kbGVTdGF0ZUNoYW5nZSgpO1xuICB9XG5cbiAgaXNUaWNraW5nID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBoYW5kbGVTdGF0ZUNoYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCBtb25pdG9yID0gdGhpcy5tYW5hZ2VyLmdldE1vbml0b3IoKSBhcyBEcmFnTGF5ZXJNb25pdG9yO1xuICAgIHRoaXMuY29sbGVjdG9yJC5uZXh0KG1vbml0b3IpO1xuICB9XG4gIHByaXZhdGUgaGFuZGxlT2Zmc2V0Q2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IG1vbml0b3IgPSB0aGlzLm1hbmFnZXIuZ2V0TW9uaXRvcigpIGFzIERyYWdMYXllck1vbml0b3I7XG4gICAgdGhpcy5jb2xsZWN0b3IkLm5leHQobW9uaXRvcik7XG4gIH1cblxuICBsaXN0ZW48UD4obWFwRm46IChtb25pdG9yOiBEcmFnTGF5ZXJNb25pdG9yKSA9PiBQKTogT2JzZXJ2YWJsZTxQPiB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdG9yJC5waXBlKFxuICAgICAgbWFwKG1hcEZuKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGFyZUNvbGxlY3RzRXF1YWwpLFxuICAgICAgc2NoZWR1bGVNaWNyb1Rhc2tBZnRlcih0aGlzLnpvbmUpXG4gICAgKTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKCkge1xuICAgIHRoaXMuY29sbGVjdG9yJC5jb21wbGV0ZSgpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBhZGQodGVhcmRvd246IFRlYXJkb3duTG9naWMpOiBTdWJzY3JpcHRpb24ge1xuICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbi5hZGQodGVhcmRvd24pO1xuICB9XG5cbiAgZ2V0IGNsb3NlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb24uY2xvc2VkO1xuICB9XG5cbn1cblxuIl19