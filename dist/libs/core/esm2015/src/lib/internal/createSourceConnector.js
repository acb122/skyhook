import { Reconnector } from './Reconnector';
export class SourceConnector {
    constructor(backend) {
        this.backend = backend;
        this.dragSource = new Reconnector((handlerId, node, options) => {
            return this.backend.connectDragSource(handlerId, node, options);
        });
        this.dragPreview = new Reconnector((handlerId, node, options) => {
            return this.backend.connectDragPreview(handlerId, node, options);
        });
        this.hooks = {
            dragSource: this.dragSource.hook,
            dragPreview: this.dragPreview.hook,
        };
    }
    receiveHandlerId(handlerId) {
        if (handlerId === this.currentHandlerId) {
            return;
        }
        this.currentHandlerId = handlerId;
        this.dragSource.reconnect(handlerId);
        this.dragPreview.reconnect(handlerId);
    }
    reconnect() {
        this.dragSource.reconnect(this.currentHandlerId);
        this.dragPreview.reconnect(this.currentHandlerId);
    }
}
export default function createSourceConnector(backend) {
    return new SourceConnector(backend);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlU291cmNlQ29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb3JlL3NyYy9saWIvaW50ZXJuYWwvY3JlYXRlU291cmNlQ29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFTNUMsTUFBTSxPQUFPLGVBQWU7SUFjeEIsWUFBb0IsT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQVg1QixlQUFVLEdBQUcsSUFBSSxXQUFXLENBQ2hDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQ0osQ0FBQztRQUNNLGdCQUFXLEdBQUcsSUFBSSxXQUFXLENBQ2pDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQ0osQ0FBQztRQWFLLFVBQUssR0FBd0I7WUFDaEMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSTtZQUNoQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJO1NBQ3JDLENBQUM7SUFkcUMsQ0FBQztJQUVqQyxnQkFBZ0IsQ0FBQyxTQUE0QjtRQUNoRCxJQUFJLFNBQVMsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDckMsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztRQUNsQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBT00sU0FBUztRQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDSjtBQUVELE1BQU0sQ0FBQyxPQUFPLFVBQVUscUJBQXFCLENBQUMsT0FBZ0I7SUFDMUQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN4QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFja2VuZCwgSWRlbnRpZmllciB9IGZyb20gJ2RuZC1jb3JlJztcbmltcG9ydCB7IERyYWdTb3VyY2VDb25uZWN0b3IgfSBmcm9tICcuLi9jb25uZWN0b3JzJztcbmltcG9ydCB7IFJlY29ubmVjdG9yIH0gZnJvbSAnLi9SZWNvbm5lY3Rvcic7XG5pbXBvcnQgeyBEcmFnUHJldmlld09wdGlvbnMsIERyYWdTb3VyY2VPcHRpb25zIH0gZnJvbSAnLi4vY29ubmVjdG9ycydcblxuZXhwb3J0IGludGVyZmFjZSBDb25uZWN0b3I8VENvbm5lY3Rvcj4ge1xuICAgIGhvb2tzOiBUQ29ubmVjdG9yO1xuICAgIHJlY2VpdmVIYW5kbGVySWQoaGFuZGxlcklkOiBJZGVudGlmaWVyIHwgbnVsbCk6IHZvaWQ7XG4gICAgcmVjb25uZWN0KCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBTb3VyY2VDb25uZWN0b3IgaW1wbGVtZW50cyBDb25uZWN0b3I8RHJhZ1NvdXJjZUNvbm5lY3Rvcj4ge1xuICAgIHByaXZhdGUgY3VycmVudEhhbmRsZXJJZDogYW55O1xuXG4gICAgcHJpdmF0ZSBkcmFnU291cmNlID0gbmV3IFJlY29ubmVjdG9yPERyYWdTb3VyY2VPcHRpb25zPihcbiAgICAgICAgKGhhbmRsZXJJZCwgbm9kZSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFja2VuZC5jb25uZWN0RHJhZ1NvdXJjZShoYW5kbGVySWQsIG5vZGUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgKTtcbiAgICBwcml2YXRlIGRyYWdQcmV2aWV3ID0gbmV3IFJlY29ubmVjdG9yPERyYWdQcmV2aWV3T3B0aW9ucz4oXG4gICAgICAgIChoYW5kbGVySWQsIG5vZGUsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhY2tlbmQuY29ubmVjdERyYWdQcmV2aWV3KGhhbmRsZXJJZCwgbm9kZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBiYWNrZW5kOiBCYWNrZW5kKSB7fVxuXG4gICAgcHVibGljIHJlY2VpdmVIYW5kbGVySWQoaGFuZGxlcklkOiBJZGVudGlmaWVyIHwgbnVsbCkge1xuICAgICAgICBpZiAoaGFuZGxlcklkID09PSB0aGlzLmN1cnJlbnRIYW5kbGVySWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRIYW5kbGVySWQgPSBoYW5kbGVySWQ7XG4gICAgICAgIHRoaXMuZHJhZ1NvdXJjZS5yZWNvbm5lY3QoaGFuZGxlcklkKTtcbiAgICAgICAgdGhpcy5kcmFnUHJldmlldy5yZWNvbm5lY3QoaGFuZGxlcklkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaG9va3M6IERyYWdTb3VyY2VDb25uZWN0b3IgPSB7XG4gICAgICAgIGRyYWdTb3VyY2U6IHRoaXMuZHJhZ1NvdXJjZS5ob29rLFxuICAgICAgICBkcmFnUHJldmlldzogdGhpcy5kcmFnUHJldmlldy5ob29rLFxuICAgIH07XG5cbiAgICBwdWJsaWMgcmVjb25uZWN0KCkge1xuICAgICAgICB0aGlzLmRyYWdTb3VyY2UucmVjb25uZWN0KHRoaXMuY3VycmVudEhhbmRsZXJJZCk7XG4gICAgICAgIHRoaXMuZHJhZ1ByZXZpZXcucmVjb25uZWN0KHRoaXMuY3VycmVudEhhbmRsZXJJZCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTb3VyY2VDb25uZWN0b3IoYmFja2VuZDogQmFja2VuZCkge1xuICAgIHJldHVybiBuZXcgU291cmNlQ29ubmVjdG9yKGJhY2tlbmQpO1xufVxuIl19