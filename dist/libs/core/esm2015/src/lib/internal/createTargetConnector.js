import { Reconnector } from './Reconnector';
export class TargetConnector {
    constructor(backend) {
        this.backend = backend;
        this.dropTarget = new Reconnector((handlerId, node, options) => {
            return this.backend.connectDropTarget(handlerId, node, options);
        });
        this.hooks = {
            dropTarget: this.dropTarget.hook
        };
    }
    receiveHandlerId(handlerId) {
        if (handlerId === this.currentHandlerId) {
            return;
        }
        this.currentHandlerId = handlerId;
        this.dropTarget.reconnect(handlerId);
    }
    reconnect() {
        this.dropTarget.reconnect(this.currentHandlerId);
    }
}
export default function createTargetConnector(backend) {
    return new TargetConnector(backend);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlVGFyZ2V0Q29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb3JlL3NyYy9saWIvaW50ZXJuYWwvY3JlYXRlVGFyZ2V0Q29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUMsTUFBTSxPQUFPLGVBQWU7SUFTeEIsWUFBb0IsT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQU41QixlQUFVLEdBQUcsSUFBSSxXQUFXLENBQ2hDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQ0osQ0FBQztRQVlLLFVBQUssR0FBd0I7WUFDaEMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSTtTQUNuQyxDQUFDO0lBWnFDLENBQUM7SUFFakMsZ0JBQWdCLENBQUMsU0FBNEI7UUFDaEQsSUFBSSxTQUFTLEtBQUssSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3JDLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDbEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQU1NLFNBQVM7UUFDWixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0o7QUFFRCxNQUFNLENBQUMsT0FBTyxVQUFVLHFCQUFxQixDQUFDLE9BQWdCO0lBQzFELE9BQU8sSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhY2tlbmQsIElkZW50aWZpZXIgfSBmcm9tICdkbmQtY29yZSc7XG5pbXBvcnQgeyBEcm9wVGFyZ2V0Q29ubmVjdG9yIH0gZnJvbSAnLi4vY29ubmVjdG9ycyc7XG5pbXBvcnQgeyBDb25uZWN0b3IgfSBmcm9tICcuL2NyZWF0ZVNvdXJjZUNvbm5lY3Rvcic7XG5pbXBvcnQgeyBSZWNvbm5lY3RvciB9IGZyb20gJy4vUmVjb25uZWN0b3InO1xuXG5leHBvcnQgY2xhc3MgVGFyZ2V0Q29ubmVjdG9yIGltcGxlbWVudHMgQ29ubmVjdG9yPERyb3BUYXJnZXRDb25uZWN0b3I+IHtcbiAgICBwcml2YXRlIGN1cnJlbnRIYW5kbGVySWQ6IGFueTtcblxuICAgIHByaXZhdGUgZHJvcFRhcmdldCA9IG5ldyBSZWNvbm5lY3Rvcjx2b2lkPihcbiAgICAgICAgKGhhbmRsZXJJZCwgbm9kZSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFja2VuZC5jb25uZWN0RHJvcFRhcmdldChoYW5kbGVySWQsIG5vZGUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFja2VuZDogQmFja2VuZCkge31cblxuICAgIHB1YmxpYyByZWNlaXZlSGFuZGxlcklkKGhhbmRsZXJJZDogSWRlbnRpZmllciB8IG51bGwpIHtcbiAgICAgICAgaWYgKGhhbmRsZXJJZCA9PT0gdGhpcy5jdXJyZW50SGFuZGxlcklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50SGFuZGxlcklkID0gaGFuZGxlcklkO1xuICAgICAgICB0aGlzLmRyb3BUYXJnZXQucmVjb25uZWN0KGhhbmRsZXJJZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGhvb2tzOiBEcm9wVGFyZ2V0Q29ubmVjdG9yID0ge1xuICAgICAgICBkcm9wVGFyZ2V0OiB0aGlzLmRyb3BUYXJnZXQuaG9va1xuICAgIH07XG5cbiAgICBwdWJsaWMgcmVjb25uZWN0KCkge1xuICAgICAgICB0aGlzLmRyb3BUYXJnZXQucmVjb25uZWN0KHRoaXMuY3VycmVudEhhbmRsZXJJZCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUYXJnZXRDb25uZWN0b3IoYmFja2VuZDogQmFja2VuZCkge1xuICAgIHJldHVybiBuZXcgVGFyZ2V0Q29ubmVjdG9yKGJhY2tlbmQpO1xufVxuIl19