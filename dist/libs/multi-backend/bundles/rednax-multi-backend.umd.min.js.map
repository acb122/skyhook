{"version":3,"sources":["../../../../libs/multi-backend/src/lib/HTML5ToTouch.ts","../../../../libs/multi-backend/src/lib/preview-renderer.component.ts","../../../../libs/multi-backend/src/lib/preview.component.ts","../../../../libs/multi-backend/src/lib/module.ts"],"names":["HTML5ToTouch","backends","backend","HTML5Backend","transition","MouseTransition","manager","ctx","TouchBackend","enableMouseEvents","preview","TouchTransition","SkyhookPreviewRendererComponent","skyhook","this","layer","dragLayer","collect$","listen","monitor","initialOffset","getInitialSourceClientOffset","currentOffset","getSourceClientOffset","style$","pipe","map","c","display","transform","x","y","WebkitTransform","prototype","ngOnDestroy","unsubscribe","i0.ɵɵelementContainer","i0","ɵɵdirectiveInject","i1","SkyhookDndService","selectors","ngContentSelectors","decls","vars","consts","template","rf","i0.ɵɵelementStart","i0.ɵɵprojection","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","i0.ɵɵadvance","ɵɵpureFunction3","_c0$1","c_r1","itemType","item","SkyhookPreviewComponent","_this","allBackends","getItem","getItemType","isDragging","previewEnabled","isPreviewEnabled","warned","warn","msg","console","getBackend","DRAG_DROP_MANAGER","contentQueries","dirIndex","TemplateRef","SkyhookMultiBackendModule","imports","CommonModule","declarations","exports","MultiBackend"],"mappings":"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","sourcesContent":["import { HTML5Backend } from 'react-dnd-html5-backend';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport {\n    MultiBackend,\n    MouseTransition,\n    TouchTransition,\n    BackendTransition,\n} from 'dnd-multi-backend';\nimport { BackendFactory } from 'dnd-core';\n\nexport const HTML5ToTouch = {\n    backends: [\n        {\n            backend: HTML5Backend,\n            transition: MouseTransition,\n        },\n        {\n            backend: (manager, ctx) =>\n                TouchBackend(manager, ctx, { enableMouseEvents: false }),\n            preview: true,\n            transition: TouchTransition,\n        },\n    ] as BackendTransition[],\n};\n\nexport function createDefaultMultiBackend(): BackendFactory {\n    return (manager, ctx) => MultiBackend(HTML5ToTouch)(manager, ctx);\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { SkyhookDndService, Offset } from '@rednax/core';\nimport { map } from 'rxjs/operators';\n// @ts-ignore\nimport { Observable } from 'rxjs';\n\n/**\n * This is internal, you probably won't ever need to use it directly.\n *\n * For understanding's sake, it helps to know that this component\n * essentially just renders whatever is placed between its tags, but\n * in a `position: fixed` container that is translated according to\n * the drag in progress and how far it has travelled.\n *\n * It currently has a workaround for some Firefox versions where the\n * whole thing wouldn't re-render unless you animated the border.\n */\n@Component({\n    selector: 'skyhook-preview-renderer',\n    template: `\n        <div class=\"firefox-bug\" [ngStyle]=\"style$ | async\">\n            <ng-content></ng-content>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                position: fixed;\n                pointer-events: none;\n                z-index: 100;\n                left: 0;\n                top: 0;\n                width: 100%;\n                height: 100%;\n            }\n            @keyframes animatedBorder {\n                from {\n                    border-color: rgba(0, 0, 0, 0);\n                }\n                to {\n                    border-color: rgba(0, 0, 0, 1);\n                }\n            }\n            .firefox-bug {\n                animation-name: animatedBorder;\n                animation-duration: 1s;\n                animation-iteration-count: infinite;\n                animation-timing-function: linear;\n            }\n        `,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkyhookPreviewRendererComponent {\n    /** @ignore */\n    private layer = this.skyhook.dragLayer();\n\n    /** @ignore */\n    collect$ = this.layer.listen((monitor) => ({\n        initialOffset: monitor.getInitialSourceClientOffset() as Offset,\n        currentOffset: monitor.getSourceClientOffset(),\n    }));\n\n    /** @ignore */\n    style$ = this.collect$.pipe(\n        map((c) => {\n            const { initialOffset, currentOffset } = c;\n\n            if (!initialOffset || !currentOffset) {\n                return {\n                    display: 'none',\n                };\n            }\n\n            let { x, y } = currentOffset;\n\n            const transform = `translate(${x}px, ${y}px)`;\n            return {\n                transform,\n                WebkitTransform: transform,\n            };\n        })\n    );\n\n    /** @ignore */\n    constructor(private skyhook: SkyhookDndService) {}\n\n    /** @ignore */\n    ngOnDestroy() {\n        this.layer.unsubscribe();\n    }\n}\n","import {\n    Component,\n    TemplateRef,\n    ContentChild,\n    Input,\n    Inject,\n    ChangeDetectionStrategy,\n} from '@angular/core';\nimport { SkyhookDndService, DRAG_DROP_MANAGER } from '@rednax/core';\nimport { DragDropManager } from 'dnd-core';\n// @ts-ignore\nimport { Observable } from 'rxjs';\n\nexport interface PreviewTemplateContext {\n    /** same as type */\n    $implicit: string | symbol;\n    type: string | symbol;\n    item: Object & any;\n}\n\n/**\n * If you pass an `<ng-template let-type let-item=\"item\">` to `<skyhook-preview>` as a child,\n * then that template will be rendered so as to follow the mouse around while dragging.\n * What you put in that template is up to you, but in most cases this will be:\n *\n```html\n<skyhook-preview>\n  <ng-template let-type let-item=\"item\">\n    <ng-content [ngSwitch]=\"type\">\n      <!-- one kind of preview per type, using *ngSwitchCase=\"'TYPE'\" -->\n      <div *ngSwitchCase=\"'TYPE'\">{{ item | json }}</div>\n    </ng-content>\n  </ng-template>\n</skyhook-preview>\n```\n */\n@Component({\n    selector: 'skyhook-preview',\n    template: `\n        <ng-container *ngIf=\"collect$ | async as c\">\n            <skyhook-preview-renderer *ngIf=\"c.previewEnabled\">\n                <ng-container *ngIf=\"c.isDragging\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            content;\n                            context: {\n                                $implicit: c.itemType,\n                                type: c.itemType,\n                                item: c.item\n                            }\n                        \"\n                    >\n                    </ng-container>\n                </ng-container>\n            </skyhook-preview-renderer>\n        </ng-container>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkyhookPreviewComponent {\n    /** Disables the check for whether the current MultiBackend wants the preview enabled */\n    @Input() allBackends = false;\n\n    /** @ignore */\n    @ContentChild(TemplateRef, { static: false })\n    content!: TemplateRef<PreviewTemplateContext>;\n\n    /** @ignore */\n    private layer = this.skyhook.dragLayer();\n\n    // we don't need all the fast-moving props here, so this optimises change detection\n    // on the projected template's inputs (i.e. the context).\n    // the fast-moving stuff is contained in the preview renderer.\n    // also, we include this.isPreviewEnabled() because in this component with OnPush,\n    // a plain getter isn't checked more than once, and this forces it to be called on each event.\n    /** @ignore */\n    collect$ = this.layer.listen((monitor) => ({\n        item: monitor.getItem(),\n        itemType: monitor.getItemType(),\n        isDragging: monitor.isDragging(),\n        previewEnabled: this.isPreviewEnabled(),\n    }));\n\n    /** @ignore */\n    warned = false;\n\n    /** @ignore */\n    constructor(\n        private skyhook: SkyhookDndService,\n        @Inject(DRAG_DROP_MANAGER) private manager: DragDropManager\n    ) {}\n\n    /** @ignore */\n    ngOnDestroy() {\n        this.layer.unsubscribe();\n    }\n\n    /** @ignore */\n    warn(msg: string) {\n        if (!this.warned) {\n            console.warn(msg);\n        }\n        this.warned = true;\n    }\n\n    /** @ignore */\n    isPreviewEnabled() {\n        if (this.allBackends) {\n            return true;\n        }\n        if (this.manager == null) {\n            this.warn(\n                'no drag and drop manager defined, are you sure you imported SkyhookDndModule?'\n            );\n            return false;\n        }\n        const backend = this.manager.getBackend() as any;\n        if (backend == null) {\n            this.warn(\n                'no drag and drop backend defined, are you sure you imported SkyhookDndModule.forRoot(backend)?'\n            );\n            return false;\n        }\n        // for when you are not using dnd-multi-backend\n        if (backend.previewEnabled == null) {\n            return true;\n        }\n        return backend.previewEnabled();\n    }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { SkyhookPreviewComponent } from \"./preview.component\";\nimport { SkyhookPreviewRendererComponent } from \"./preview-renderer.component\";\n\n/** @ignore */\nconst EXPORTS = [\n    SkyhookPreviewComponent,\n    SkyhookPreviewRendererComponent,\n];\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: EXPORTS,\n    exports: EXPORTS,\n})\nexport class SkyhookMultiBackendModule {}\n"]}